// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// DatabaseService is an autogenerated mock type for the DatabaseService type
type DatabaseService struct {
	mock.Mock
}

type DatabaseService_Expecter struct {
	mock *mock.Mock
}

func (_m *DatabaseService) EXPECT() *DatabaseService_Expecter {
	return &DatabaseService_Expecter{mock: &_m.Mock}
}

// LoadScript provides a mock function with given fields:
func (_m *DatabaseService) LoadScript() {
	_m.Called()
}

// DatabaseService_LoadScript_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadScript'
type DatabaseService_LoadScript_Call struct {
	*mock.Call
}

// LoadScript is a helper method to define mock.On call
func (_e *DatabaseService_Expecter) LoadScript() *DatabaseService_LoadScript_Call {
	return &DatabaseService_LoadScript_Call{Call: _e.mock.On("LoadScript")}
}

func (_c *DatabaseService_LoadScript_Call) Run(run func()) *DatabaseService_LoadScript_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DatabaseService_LoadScript_Call) Return() *DatabaseService_LoadScript_Call {
	_c.Call.Return()
	return _c
}

func (_c *DatabaseService_LoadScript_Call) RunAndReturn(run func()) *DatabaseService_LoadScript_Call {
	_c.Call.Return(run)
	return _c
}

// NewDatabaseService creates a new instance of DatabaseService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDatabaseService(t interface {
	mock.TestingT
	Cleanup(func())
}) *DatabaseService {
	mock := &DatabaseService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
