// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	types "github.com/alcb1310/bca/internals/types"
	mock "github.com/stretchr/testify/mock"
)

// DatabaseService is an autogenerated mock type for the DatabaseService type
type DatabaseService struct {
	mock.Mock
}

type DatabaseService_Expecter struct {
	mock *mock.Mock
}

func (_m *DatabaseService) EXPECT() *DatabaseService_Expecter {
	return &DatabaseService_Expecter{mock: &_m.Mock}
}

// CreateCompany provides a mock function with given fields: c, u
func (_m *DatabaseService) CreateCompany(c *types.Company, u *types.CreateUser) error {
	ret := _m.Called(c, u)

	if len(ret) == 0 {
		panic("no return value specified for CreateCompany")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*types.Company, *types.CreateUser) error); ok {
		r0 = rf(c, u)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DatabaseService_CreateCompany_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCompany'
type DatabaseService_CreateCompany_Call struct {
	*mock.Call
}

// CreateCompany is a helper method to define mock.On call
//   - c *types.Company
//   - u *types.CreateUser
func (_e *DatabaseService_Expecter) CreateCompany(c interface{}, u interface{}) *DatabaseService_CreateCompany_Call {
	return &DatabaseService_CreateCompany_Call{Call: _e.mock.On("CreateCompany", c, u)}
}

func (_c *DatabaseService_CreateCompany_Call) Run(run func(c *types.Company, u *types.CreateUser)) *DatabaseService_CreateCompany_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*types.Company), args[1].(*types.CreateUser))
	})
	return _c
}

func (_c *DatabaseService_CreateCompany_Call) Return(_a0 error) *DatabaseService_CreateCompany_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DatabaseService_CreateCompany_Call) RunAndReturn(run func(*types.Company, *types.CreateUser) error) *DatabaseService_CreateCompany_Call {
	_c.Call.Return(run)
	return _c
}

// LoadScript provides a mock function with given fields:
func (_m *DatabaseService) LoadScript() {
	_m.Called()
}

// DatabaseService_LoadScript_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadScript'
type DatabaseService_LoadScript_Call struct {
	*mock.Call
}

// LoadScript is a helper method to define mock.On call
func (_e *DatabaseService_Expecter) LoadScript() *DatabaseService_LoadScript_Call {
	return &DatabaseService_LoadScript_Call{Call: _e.mock.On("LoadScript")}
}

func (_c *DatabaseService_LoadScript_Call) Run(run func()) *DatabaseService_LoadScript_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DatabaseService_LoadScript_Call) Return() *DatabaseService_LoadScript_Call {
	_c.Call.Return()
	return _c
}

func (_c *DatabaseService_LoadScript_Call) RunAndReturn(run func()) *DatabaseService_LoadScript_Call {
	_c.Call.Return(run)
	return _c
}

// NewDatabaseService creates a new instance of DatabaseService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDatabaseService(t interface {
	mock.TestingT
	Cleanup(func())
}) *DatabaseService {
	mock := &DatabaseService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
