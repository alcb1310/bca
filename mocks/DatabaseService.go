// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	types "github.com/alcb1310/bca/internals/types"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// DatabaseService is an autogenerated mock type for the DatabaseService type
type DatabaseService struct {
	mock.Mock
}

type DatabaseService_Expecter struct {
	mock *mock.Mock
}

func (_m *DatabaseService) EXPECT() *DatabaseService_Expecter {
	return &DatabaseService_Expecter{mock: &_m.Mock}
}

// CreateCompany provides a mock function with given fields: c, u
func (_m *DatabaseService) CreateCompany(c *types.Company, u *types.CreateUser) error {
	ret := _m.Called(c, u)

	if len(ret) == 0 {
		panic("no return value specified for CreateCompany")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*types.Company, *types.CreateUser) error); ok {
		r0 = rf(c, u)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DatabaseService_CreateCompany_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCompany'
type DatabaseService_CreateCompany_Call struct {
	*mock.Call
}

// CreateCompany is a helper method to define mock.On call
//   - c *types.Company
//   - u *types.CreateUser
func (_e *DatabaseService_Expecter) CreateCompany(c interface{}, u interface{}) *DatabaseService_CreateCompany_Call {
	return &DatabaseService_CreateCompany_Call{Call: _e.mock.On("CreateCompany", c, u)}
}

func (_c *DatabaseService_CreateCompany_Call) Run(run func(c *types.Company, u *types.CreateUser)) *DatabaseService_CreateCompany_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*types.Company), args[1].(*types.CreateUser))
	})
	return _c
}

func (_c *DatabaseService_CreateCompany_Call) Return(_a0 error) *DatabaseService_CreateCompany_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DatabaseService_CreateCompany_Call) RunAndReturn(run func(*types.Company, *types.CreateUser) error) *DatabaseService_CreateCompany_Call {
	_c.Call.Return(run)
	return _c
}

// CreateProject provides a mock function with given fields: project
func (_m *DatabaseService) CreateProject(project types.Project) (types.Project, error) {
	ret := _m.Called(project)

	if len(ret) == 0 {
		panic("no return value specified for CreateProject")
	}

	var r0 types.Project
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Project) (types.Project, error)); ok {
		return rf(project)
	}
	if rf, ok := ret.Get(0).(func(types.Project) types.Project); ok {
		r0 = rf(project)
	} else {
		r0 = ret.Get(0).(types.Project)
	}

	if rf, ok := ret.Get(1).(func(types.Project) error); ok {
		r1 = rf(project)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DatabaseService_CreateProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProject'
type DatabaseService_CreateProject_Call struct {
	*mock.Call
}

// CreateProject is a helper method to define mock.On call
//   - project types.Project
func (_e *DatabaseService_Expecter) CreateProject(project interface{}) *DatabaseService_CreateProject_Call {
	return &DatabaseService_CreateProject_Call{Call: _e.mock.On("CreateProject", project)}
}

func (_c *DatabaseService_CreateProject_Call) Run(run func(project types.Project)) *DatabaseService_CreateProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Project))
	})
	return _c
}

func (_c *DatabaseService_CreateProject_Call) Return(_a0 types.Project, _a1 error) *DatabaseService_CreateProject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DatabaseService_CreateProject_Call) RunAndReturn(run func(types.Project) (types.Project, error)) *DatabaseService_CreateProject_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllProjects provides a mock function with given fields: companyID
func (_m *DatabaseService) GetAllProjects(companyID uuid.UUID) []types.Project {
	ret := _m.Called(companyID)

	if len(ret) == 0 {
		panic("no return value specified for GetAllProjects")
	}

	var r0 []types.Project
	if rf, ok := ret.Get(0).(func(uuid.UUID) []types.Project); ok {
		r0 = rf(companyID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Project)
		}
	}

	return r0
}

// DatabaseService_GetAllProjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllProjects'
type DatabaseService_GetAllProjects_Call struct {
	*mock.Call
}

// GetAllProjects is a helper method to define mock.On call
//   - companyID uuid.UUID
func (_e *DatabaseService_Expecter) GetAllProjects(companyID interface{}) *DatabaseService_GetAllProjects_Call {
	return &DatabaseService_GetAllProjects_Call{Call: _e.mock.On("GetAllProjects", companyID)}
}

func (_c *DatabaseService_GetAllProjects_Call) Run(run func(companyID uuid.UUID)) *DatabaseService_GetAllProjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *DatabaseService_GetAllProjects_Call) Return(_a0 []types.Project) *DatabaseService_GetAllProjects_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DatabaseService_GetAllProjects_Call) RunAndReturn(run func(uuid.UUID) []types.Project) *DatabaseService_GetAllProjects_Call {
	_c.Call.Return(run)
	return _c
}

// LoadScript provides a mock function with given fields:
func (_m *DatabaseService) LoadScript() {
	_m.Called()
}

// DatabaseService_LoadScript_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadScript'
type DatabaseService_LoadScript_Call struct {
	*mock.Call
}

// LoadScript is a helper method to define mock.On call
func (_e *DatabaseService_Expecter) LoadScript() *DatabaseService_LoadScript_Call {
	return &DatabaseService_LoadScript_Call{Call: _e.mock.On("LoadScript")}
}

func (_c *DatabaseService_LoadScript_Call) Run(run func()) *DatabaseService_LoadScript_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DatabaseService_LoadScript_Call) Return() *DatabaseService_LoadScript_Call {
	_c.Call.Return()
	return _c
}

func (_c *DatabaseService_LoadScript_Call) RunAndReturn(run func()) *DatabaseService_LoadScript_Call {
	_c.Call.Return(run)
	return _c
}

// Login provides a mock function with given fields: email, password
func (_m *DatabaseService) Login(email string, password string) (types.User, error) {
	ret := _m.Called(email, password)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 types.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (types.User, error)); ok {
		return rf(email, password)
	}
	if rf, ok := ret.Get(0).(func(string, string) types.User); ok {
		r0 = rf(email, password)
	} else {
		r0 = ret.Get(0).(types.User)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DatabaseService_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type DatabaseService_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - email string
//   - password string
func (_e *DatabaseService_Expecter) Login(email interface{}, password interface{}) *DatabaseService_Login_Call {
	return &DatabaseService_Login_Call{Call: _e.mock.On("Login", email, password)}
}

func (_c *DatabaseService_Login_Call) Run(run func(email string, password string)) *DatabaseService_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *DatabaseService_Login_Call) Return(_a0 types.User, _a1 error) *DatabaseService_Login_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DatabaseService_Login_Call) RunAndReturn(run func(string, string) (types.User, error)) *DatabaseService_Login_Call {
	_c.Call.Return(run)
	return _c
}

// NewDatabaseService creates a new instance of DatabaseService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDatabaseService(t interface {
	mock.TestingT
	Cleanup(func())
}) *DatabaseService {
	mock := &DatabaseService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
