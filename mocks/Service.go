// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	time "time"

	mock "github.com/stretchr/testify/mock"

	types "github.com/alcb1310/bca/internal/types"

	uuid "github.com/google/uuid"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

type Service_Expecter struct {
	mock *mock.Mock
}

func (_m *Service) EXPECT() *Service_Expecter {
	return &Service_Expecter{mock: &_m.Mock}
}

// AddDetail provides a mock function with given fields: detail
func (_m *Service) AddDetail(detail types.InvoiceDetailCreate) error {
	ret := _m.Called(detail)

	if len(ret) == 0 {
		panic("no return value specified for AddDetail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(types.InvoiceDetailCreate) error); ok {
		r0 = rf(detail)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Service_AddDetail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddDetail'
type Service_AddDetail_Call struct {
	*mock.Call
}

// AddDetail is a helper method to define mock.On call
//   - detail types.InvoiceDetailCreate
func (_e *Service_Expecter) AddDetail(detail interface{}) *Service_AddDetail_Call {
	return &Service_AddDetail_Call{Call: _e.mock.On("AddDetail", detail)}
}

func (_c *Service_AddDetail_Call) Run(run func(detail types.InvoiceDetailCreate)) *Service_AddDetail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.InvoiceDetailCreate))
	})
	return _c
}

func (_c *Service_AddDetail_Call) Return(_a0 error) *Service_AddDetail_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Service_AddDetail_Call) RunAndReturn(run func(types.InvoiceDetailCreate) error) *Service_AddDetail_Call {
	_c.Call.Return(run)
	return _c
}

// AddMaterialsByItem provides a mock function with given fields: itemId, materialId, quantity, companyId
func (_m *Service) AddMaterialsByItem(itemId uuid.UUID, materialId uuid.UUID, quantity float64, companyId uuid.UUID) error {
	ret := _m.Called(itemId, materialId, quantity, companyId)

	if len(ret) == 0 {
		panic("no return value specified for AddMaterialsByItem")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID, float64, uuid.UUID) error); ok {
		r0 = rf(itemId, materialId, quantity, companyId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Service_AddMaterialsByItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddMaterialsByItem'
type Service_AddMaterialsByItem_Call struct {
	*mock.Call
}

// AddMaterialsByItem is a helper method to define mock.On call
//   - itemId uuid.UUID
//   - materialId uuid.UUID
//   - quantity float64
//   - companyId uuid.UUID
func (_e *Service_Expecter) AddMaterialsByItem(itemId interface{}, materialId interface{}, quantity interface{}, companyId interface{}) *Service_AddMaterialsByItem_Call {
	return &Service_AddMaterialsByItem_Call{Call: _e.mock.On("AddMaterialsByItem", itemId, materialId, quantity, companyId)}
}

func (_c *Service_AddMaterialsByItem_Call) Run(run func(itemId uuid.UUID, materialId uuid.UUID, quantity float64, companyId uuid.UUID)) *Service_AddMaterialsByItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(uuid.UUID), args[2].(float64), args[3].(uuid.UUID))
	})
	return _c
}

func (_c *Service_AddMaterialsByItem_Call) Return(_a0 error) *Service_AddMaterialsByItem_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Service_AddMaterialsByItem_Call) RunAndReturn(run func(uuid.UUID, uuid.UUID, float64, uuid.UUID) error) *Service_AddMaterialsByItem_Call {
	_c.Call.Return(run)
	return _c
}

// AnalysisReport provides a mock function with given fields: project_id, company_id
func (_m *Service) AnalysisReport(project_id uuid.UUID, company_id uuid.UUID) map[string][]types.AnalysisReport {
	ret := _m.Called(project_id, company_id)

	if len(ret) == 0 {
		panic("no return value specified for AnalysisReport")
	}

	var r0 map[string][]types.AnalysisReport
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) map[string][]types.AnalysisReport); ok {
		r0 = rf(project_id, company_id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string][]types.AnalysisReport)
		}
	}

	return r0
}

// Service_AnalysisReport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AnalysisReport'
type Service_AnalysisReport_Call struct {
	*mock.Call
}

// AnalysisReport is a helper method to define mock.On call
//   - project_id uuid.UUID
//   - company_id uuid.UUID
func (_e *Service_Expecter) AnalysisReport(project_id interface{}, company_id interface{}) *Service_AnalysisReport_Call {
	return &Service_AnalysisReport_Call{Call: _e.mock.On("AnalysisReport", project_id, company_id)}
}

func (_c *Service_AnalysisReport_Call) Run(run func(project_id uuid.UUID, company_id uuid.UUID)) *Service_AnalysisReport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *Service_AnalysisReport_Call) Return(_a0 map[string][]types.AnalysisReport) *Service_AnalysisReport_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Service_AnalysisReport_Call) RunAndReturn(run func(uuid.UUID, uuid.UUID) map[string][]types.AnalysisReport) *Service_AnalysisReport_Call {
	_c.Call.Return(run)
	return _c
}

// BalanceInvoice provides a mock function with given fields: invoice
func (_m *Service) BalanceInvoice(invoice types.InvoiceResponse) error {
	ret := _m.Called(invoice)

	if len(ret) == 0 {
		panic("no return value specified for BalanceInvoice")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(types.InvoiceResponse) error); ok {
		r0 = rf(invoice)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Service_BalanceInvoice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BalanceInvoice'
type Service_BalanceInvoice_Call struct {
	*mock.Call
}

// BalanceInvoice is a helper method to define mock.On call
//   - invoice types.InvoiceResponse
func (_e *Service_Expecter) BalanceInvoice(invoice interface{}) *Service_BalanceInvoice_Call {
	return &Service_BalanceInvoice_Call{Call: _e.mock.On("BalanceInvoice", invoice)}
}

func (_c *Service_BalanceInvoice_Call) Run(run func(invoice types.InvoiceResponse)) *Service_BalanceInvoice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.InvoiceResponse))
	})
	return _c
}

func (_c *Service_BalanceInvoice_Call) Return(_a0 error) *Service_BalanceInvoice_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Service_BalanceInvoice_Call) RunAndReturn(run func(types.InvoiceResponse) error) *Service_BalanceInvoice_Call {
	_c.Call.Return(run)
	return _c
}

// CantidadesTable provides a mock function with given fields: companyId
func (_m *Service) CantidadesTable(companyId uuid.UUID) []types.Quantity {
	ret := _m.Called(companyId)

	if len(ret) == 0 {
		panic("no return value specified for CantidadesTable")
	}

	var r0 []types.Quantity
	if rf, ok := ret.Get(0).(func(uuid.UUID) []types.Quantity); ok {
		r0 = rf(companyId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Quantity)
		}
	}

	return r0
}

// Service_CantidadesTable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CantidadesTable'
type Service_CantidadesTable_Call struct {
	*mock.Call
}

// CantidadesTable is a helper method to define mock.On call
//   - companyId uuid.UUID
func (_e *Service_Expecter) CantidadesTable(companyId interface{}) *Service_CantidadesTable_Call {
	return &Service_CantidadesTable_Call{Call: _e.mock.On("CantidadesTable", companyId)}
}

func (_c *Service_CantidadesTable_Call) Run(run func(companyId uuid.UUID)) *Service_CantidadesTable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *Service_CantidadesTable_Call) Return(_a0 []types.Quantity) *Service_CantidadesTable_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Service_CantidadesTable_Call) RunAndReturn(run func(uuid.UUID) []types.Quantity) *Service_CantidadesTable_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBudget provides a mock function with given fields: b
func (_m *Service) CreateBudget(b *types.CreateBudget) (types.Budget, error) {
	ret := _m.Called(b)

	if len(ret) == 0 {
		panic("no return value specified for CreateBudget")
	}

	var r0 types.Budget
	var r1 error
	if rf, ok := ret.Get(0).(func(*types.CreateBudget) (types.Budget, error)); ok {
		return rf(b)
	}
	if rf, ok := ret.Get(0).(func(*types.CreateBudget) types.Budget); ok {
		r0 = rf(b)
	} else {
		r0 = ret.Get(0).(types.Budget)
	}

	if rf, ok := ret.Get(1).(func(*types.CreateBudget) error); ok {
		r1 = rf(b)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_CreateBudget_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBudget'
type Service_CreateBudget_Call struct {
	*mock.Call
}

// CreateBudget is a helper method to define mock.On call
//   - b *types.CreateBudget
func (_e *Service_Expecter) CreateBudget(b interface{}) *Service_CreateBudget_Call {
	return &Service_CreateBudget_Call{Call: _e.mock.On("CreateBudget", b)}
}

func (_c *Service_CreateBudget_Call) Run(run func(b *types.CreateBudget)) *Service_CreateBudget_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*types.CreateBudget))
	})
	return _c
}

func (_c *Service_CreateBudget_Call) Return(_a0 types.Budget, _a1 error) *Service_CreateBudget_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_CreateBudget_Call) RunAndReturn(run func(*types.CreateBudget) (types.Budget, error)) *Service_CreateBudget_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBudgetItem provides a mock function with given fields: bi
func (_m *Service) CreateBudgetItem(bi *types.BudgetItem) error {
	ret := _m.Called(bi)

	if len(ret) == 0 {
		panic("no return value specified for CreateBudgetItem")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*types.BudgetItem) error); ok {
		r0 = rf(bi)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Service_CreateBudgetItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBudgetItem'
type Service_CreateBudgetItem_Call struct {
	*mock.Call
}

// CreateBudgetItem is a helper method to define mock.On call
//   - bi *types.BudgetItem
func (_e *Service_Expecter) CreateBudgetItem(bi interface{}) *Service_CreateBudgetItem_Call {
	return &Service_CreateBudgetItem_Call{Call: _e.mock.On("CreateBudgetItem", bi)}
}

func (_c *Service_CreateBudgetItem_Call) Run(run func(bi *types.BudgetItem)) *Service_CreateBudgetItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*types.BudgetItem))
	})
	return _c
}

func (_c *Service_CreateBudgetItem_Call) Return(_a0 error) *Service_CreateBudgetItem_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Service_CreateBudgetItem_Call) RunAndReturn(run func(*types.BudgetItem) error) *Service_CreateBudgetItem_Call {
	_c.Call.Return(run)
	return _c
}

// CreateCantidades provides a mock function with given fields: projectId, rubroId, quantity, companyId
func (_m *Service) CreateCantidades(projectId uuid.UUID, rubroId uuid.UUID, quantity float64, companyId uuid.UUID) error {
	ret := _m.Called(projectId, rubroId, quantity, companyId)

	if len(ret) == 0 {
		panic("no return value specified for CreateCantidades")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID, float64, uuid.UUID) error); ok {
		r0 = rf(projectId, rubroId, quantity, companyId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Service_CreateCantidades_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCantidades'
type Service_CreateCantidades_Call struct {
	*mock.Call
}

// CreateCantidades is a helper method to define mock.On call
//   - projectId uuid.UUID
//   - rubroId uuid.UUID
//   - quantity float64
//   - companyId uuid.UUID
func (_e *Service_Expecter) CreateCantidades(projectId interface{}, rubroId interface{}, quantity interface{}, companyId interface{}) *Service_CreateCantidades_Call {
	return &Service_CreateCantidades_Call{Call: _e.mock.On("CreateCantidades", projectId, rubroId, quantity, companyId)}
}

func (_c *Service_CreateCantidades_Call) Run(run func(projectId uuid.UUID, rubroId uuid.UUID, quantity float64, companyId uuid.UUID)) *Service_CreateCantidades_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(uuid.UUID), args[2].(float64), args[3].(uuid.UUID))
	})
	return _c
}

func (_c *Service_CreateCantidades_Call) Return(_a0 error) *Service_CreateCantidades_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Service_CreateCantidades_Call) RunAndReturn(run func(uuid.UUID, uuid.UUID, float64, uuid.UUID) error) *Service_CreateCantidades_Call {
	_c.Call.Return(run)
	return _c
}

// CreateCategory provides a mock function with given fields: category
func (_m *Service) CreateCategory(category types.Category) error {
	ret := _m.Called(category)

	if len(ret) == 0 {
		panic("no return value specified for CreateCategory")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(types.Category) error); ok {
		r0 = rf(category)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Service_CreateCategory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCategory'
type Service_CreateCategory_Call struct {
	*mock.Call
}

// CreateCategory is a helper method to define mock.On call
//   - category types.Category
func (_e *Service_Expecter) CreateCategory(category interface{}) *Service_CreateCategory_Call {
	return &Service_CreateCategory_Call{Call: _e.mock.On("CreateCategory", category)}
}

func (_c *Service_CreateCategory_Call) Run(run func(category types.Category)) *Service_CreateCategory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Category))
	})
	return _c
}

func (_c *Service_CreateCategory_Call) Return(_a0 error) *Service_CreateCategory_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Service_CreateCategory_Call) RunAndReturn(run func(types.Category) error) *Service_CreateCategory_Call {
	_c.Call.Return(run)
	return _c
}

// CreateClosure provides a mock function with given fields: companyId, projectId, date
func (_m *Service) CreateClosure(companyId uuid.UUID, projectId uuid.UUID, date time.Time) error {
	ret := _m.Called(companyId, projectId, date)

	if len(ret) == 0 {
		panic("no return value specified for CreateClosure")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID, time.Time) error); ok {
		r0 = rf(companyId, projectId, date)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Service_CreateClosure_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateClosure'
type Service_CreateClosure_Call struct {
	*mock.Call
}

// CreateClosure is a helper method to define mock.On call
//   - companyId uuid.UUID
//   - projectId uuid.UUID
//   - date time.Time
func (_e *Service_Expecter) CreateClosure(companyId interface{}, projectId interface{}, date interface{}) *Service_CreateClosure_Call {
	return &Service_CreateClosure_Call{Call: _e.mock.On("CreateClosure", companyId, projectId, date)}
}

func (_c *Service_CreateClosure_Call) Run(run func(companyId uuid.UUID, projectId uuid.UUID, date time.Time)) *Service_CreateClosure_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(uuid.UUID), args[2].(time.Time))
	})
	return _c
}

func (_c *Service_CreateClosure_Call) Return(_a0 error) *Service_CreateClosure_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Service_CreateClosure_Call) RunAndReturn(run func(uuid.UUID, uuid.UUID, time.Time) error) *Service_CreateClosure_Call {
	_c.Call.Return(run)
	return _c
}

// CreateCompany provides a mock function with given fields: company
func (_m *Service) CreateCompany(company *types.CompanyCreate) error {
	ret := _m.Called(company)

	if len(ret) == 0 {
		panic("no return value specified for CreateCompany")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*types.CompanyCreate) error); ok {
		r0 = rf(company)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Service_CreateCompany_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCompany'
type Service_CreateCompany_Call struct {
	*mock.Call
}

// CreateCompany is a helper method to define mock.On call
//   - company *types.CompanyCreate
func (_e *Service_Expecter) CreateCompany(company interface{}) *Service_CreateCompany_Call {
	return &Service_CreateCompany_Call{Call: _e.mock.On("CreateCompany", company)}
}

func (_c *Service_CreateCompany_Call) Run(run func(company *types.CompanyCreate)) *Service_CreateCompany_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*types.CompanyCreate))
	})
	return _c
}

func (_c *Service_CreateCompany_Call) Return(_a0 error) *Service_CreateCompany_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Service_CreateCompany_Call) RunAndReturn(run func(*types.CompanyCreate) error) *Service_CreateCompany_Call {
	_c.Call.Return(run)
	return _c
}

// CreateInvoice provides a mock function with given fields: invoice
func (_m *Service) CreateInvoice(invoice *types.InvoiceCreate) error {
	ret := _m.Called(invoice)

	if len(ret) == 0 {
		panic("no return value specified for CreateInvoice")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*types.InvoiceCreate) error); ok {
		r0 = rf(invoice)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Service_CreateInvoice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateInvoice'
type Service_CreateInvoice_Call struct {
	*mock.Call
}

// CreateInvoice is a helper method to define mock.On call
//   - invoice *types.InvoiceCreate
func (_e *Service_Expecter) CreateInvoice(invoice interface{}) *Service_CreateInvoice_Call {
	return &Service_CreateInvoice_Call{Call: _e.mock.On("CreateInvoice", invoice)}
}

func (_c *Service_CreateInvoice_Call) Run(run func(invoice *types.InvoiceCreate)) *Service_CreateInvoice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*types.InvoiceCreate))
	})
	return _c
}

func (_c *Service_CreateInvoice_Call) Return(_a0 error) *Service_CreateInvoice_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Service_CreateInvoice_Call) RunAndReturn(run func(*types.InvoiceCreate) error) *Service_CreateInvoice_Call {
	_c.Call.Return(run)
	return _c
}

// CreateMaterial provides a mock function with given fields: material
func (_m *Service) CreateMaterial(material types.Material) error {
	ret := _m.Called(material)

	if len(ret) == 0 {
		panic("no return value specified for CreateMaterial")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(types.Material) error); ok {
		r0 = rf(material)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Service_CreateMaterial_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateMaterial'
type Service_CreateMaterial_Call struct {
	*mock.Call
}

// CreateMaterial is a helper method to define mock.On call
//   - material types.Material
func (_e *Service_Expecter) CreateMaterial(material interface{}) *Service_CreateMaterial_Call {
	return &Service_CreateMaterial_Call{Call: _e.mock.On("CreateMaterial", material)}
}

func (_c *Service_CreateMaterial_Call) Run(run func(material types.Material)) *Service_CreateMaterial_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Material))
	})
	return _c
}

func (_c *Service_CreateMaterial_Call) Return(_a0 error) *Service_CreateMaterial_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Service_CreateMaterial_Call) RunAndReturn(run func(types.Material) error) *Service_CreateMaterial_Call {
	_c.Call.Return(run)
	return _c
}

// CreateProject provides a mock function with given fields: p
func (_m *Service) CreateProject(p types.Project) (types.Project, error) {
	ret := _m.Called(p)

	if len(ret) == 0 {
		panic("no return value specified for CreateProject")
	}

	var r0 types.Project
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Project) (types.Project, error)); ok {
		return rf(p)
	}
	if rf, ok := ret.Get(0).(func(types.Project) types.Project); ok {
		r0 = rf(p)
	} else {
		r0 = ret.Get(0).(types.Project)
	}

	if rf, ok := ret.Get(1).(func(types.Project) error); ok {
		r1 = rf(p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_CreateProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProject'
type Service_CreateProject_Call struct {
	*mock.Call
}

// CreateProject is a helper method to define mock.On call
//   - p types.Project
func (_e *Service_Expecter) CreateProject(p interface{}) *Service_CreateProject_Call {
	return &Service_CreateProject_Call{Call: _e.mock.On("CreateProject", p)}
}

func (_c *Service_CreateProject_Call) Run(run func(p types.Project)) *Service_CreateProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Project))
	})
	return _c
}

func (_c *Service_CreateProject_Call) Return(_a0 types.Project, _a1 error) *Service_CreateProject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_CreateProject_Call) RunAndReturn(run func(types.Project) (types.Project, error)) *Service_CreateProject_Call {
	_c.Call.Return(run)
	return _c
}

// CreateRubro provides a mock function with given fields: rubro
func (_m *Service) CreateRubro(rubro types.Rubro) (uuid.UUID, error) {
	ret := _m.Called(rubro)

	if len(ret) == 0 {
		panic("no return value specified for CreateRubro")
	}

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Rubro) (uuid.UUID, error)); ok {
		return rf(rubro)
	}
	if rf, ok := ret.Get(0).(func(types.Rubro) uuid.UUID); ok {
		r0 = rf(rubro)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(types.Rubro) error); ok {
		r1 = rf(rubro)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_CreateRubro_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRubro'
type Service_CreateRubro_Call struct {
	*mock.Call
}

// CreateRubro is a helper method to define mock.On call
//   - rubro types.Rubro
func (_e *Service_Expecter) CreateRubro(rubro interface{}) *Service_CreateRubro_Call {
	return &Service_CreateRubro_Call{Call: _e.mock.On("CreateRubro", rubro)}
}

func (_c *Service_CreateRubro_Call) Run(run func(rubro types.Rubro)) *Service_CreateRubro_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Rubro))
	})
	return _c
}

func (_c *Service_CreateRubro_Call) Return(_a0 uuid.UUID, _a1 error) *Service_CreateRubro_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_CreateRubro_Call) RunAndReturn(run func(types.Rubro) (uuid.UUID, error)) *Service_CreateRubro_Call {
	_c.Call.Return(run)
	return _c
}

// CreateSupplier provides a mock function with given fields: supplier
func (_m *Service) CreateSupplier(supplier *types.Supplier) error {
	ret := _m.Called(supplier)

	if len(ret) == 0 {
		panic("no return value specified for CreateSupplier")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*types.Supplier) error); ok {
		r0 = rf(supplier)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Service_CreateSupplier_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSupplier'
type Service_CreateSupplier_Call struct {
	*mock.Call
}

// CreateSupplier is a helper method to define mock.On call
//   - supplier *types.Supplier
func (_e *Service_Expecter) CreateSupplier(supplier interface{}) *Service_CreateSupplier_Call {
	return &Service_CreateSupplier_Call{Call: _e.mock.On("CreateSupplier", supplier)}
}

func (_c *Service_CreateSupplier_Call) Run(run func(supplier *types.Supplier)) *Service_CreateSupplier_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*types.Supplier))
	})
	return _c
}

func (_c *Service_CreateSupplier_Call) Return(_a0 error) *Service_CreateSupplier_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Service_CreateSupplier_Call) RunAndReturn(run func(*types.Supplier) error) *Service_CreateSupplier_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUser provides a mock function with given fields: u
func (_m *Service) CreateUser(u *types.UserCreate) (types.User, error) {
	ret := _m.Called(u)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 types.User
	var r1 error
	if rf, ok := ret.Get(0).(func(*types.UserCreate) (types.User, error)); ok {
		return rf(u)
	}
	if rf, ok := ret.Get(0).(func(*types.UserCreate) types.User); ok {
		r0 = rf(u)
	} else {
		r0 = ret.Get(0).(types.User)
	}

	if rf, ok := ret.Get(1).(func(*types.UserCreate) error); ok {
		r1 = rf(u)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type Service_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - u *types.UserCreate
func (_e *Service_Expecter) CreateUser(u interface{}) *Service_CreateUser_Call {
	return &Service_CreateUser_Call{Call: _e.mock.On("CreateUser", u)}
}

func (_c *Service_CreateUser_Call) Run(run func(u *types.UserCreate)) *Service_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*types.UserCreate))
	})
	return _c
}

func (_c *Service_CreateUser_Call) Return(_a0 types.User, _a1 error) *Service_CreateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_CreateUser_Call) RunAndReturn(run func(*types.UserCreate) (types.User, error)) *Service_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCantidades provides a mock function with given fields: id, companyId
func (_m *Service) DeleteCantidades(id uuid.UUID, companyId uuid.UUID) error {
	ret := _m.Called(id, companyId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCantidades")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(id, companyId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Service_DeleteCantidades_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCantidades'
type Service_DeleteCantidades_Call struct {
	*mock.Call
}

// DeleteCantidades is a helper method to define mock.On call
//   - id uuid.UUID
//   - companyId uuid.UUID
func (_e *Service_Expecter) DeleteCantidades(id interface{}, companyId interface{}) *Service_DeleteCantidades_Call {
	return &Service_DeleteCantidades_Call{Call: _e.mock.On("DeleteCantidades", id, companyId)}
}

func (_c *Service_DeleteCantidades_Call) Run(run func(id uuid.UUID, companyId uuid.UUID)) *Service_DeleteCantidades_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *Service_DeleteCantidades_Call) Return(_a0 error) *Service_DeleteCantidades_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Service_DeleteCantidades_Call) RunAndReturn(run func(uuid.UUID, uuid.UUID) error) *Service_DeleteCantidades_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteDetail provides a mock function with given fields: invoiceId, budgetItemId, companyId
func (_m *Service) DeleteDetail(invoiceId uuid.UUID, budgetItemId uuid.UUID, companyId uuid.UUID) error {
	ret := _m.Called(invoiceId, budgetItemId, companyId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDetail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(invoiceId, budgetItemId, companyId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Service_DeleteDetail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDetail'
type Service_DeleteDetail_Call struct {
	*mock.Call
}

// DeleteDetail is a helper method to define mock.On call
//   - invoiceId uuid.UUID
//   - budgetItemId uuid.UUID
//   - companyId uuid.UUID
func (_e *Service_Expecter) DeleteDetail(invoiceId interface{}, budgetItemId interface{}, companyId interface{}) *Service_DeleteDetail_Call {
	return &Service_DeleteDetail_Call{Call: _e.mock.On("DeleteDetail", invoiceId, budgetItemId, companyId)}
}

func (_c *Service_DeleteDetail_Call) Run(run func(invoiceId uuid.UUID, budgetItemId uuid.UUID, companyId uuid.UUID)) *Service_DeleteDetail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(uuid.UUID), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *Service_DeleteDetail_Call) Return(_a0 error) *Service_DeleteDetail_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Service_DeleteDetail_Call) RunAndReturn(run func(uuid.UUID, uuid.UUID, uuid.UUID) error) *Service_DeleteDetail_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteInvoice provides a mock function with given fields: invoiceId, companyId
func (_m *Service) DeleteInvoice(invoiceId uuid.UUID, companyId uuid.UUID) error {
	ret := _m.Called(invoiceId, companyId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteInvoice")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(invoiceId, companyId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Service_DeleteInvoice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteInvoice'
type Service_DeleteInvoice_Call struct {
	*mock.Call
}

// DeleteInvoice is a helper method to define mock.On call
//   - invoiceId uuid.UUID
//   - companyId uuid.UUID
func (_e *Service_Expecter) DeleteInvoice(invoiceId interface{}, companyId interface{}) *Service_DeleteInvoice_Call {
	return &Service_DeleteInvoice_Call{Call: _e.mock.On("DeleteInvoice", invoiceId, companyId)}
}

func (_c *Service_DeleteInvoice_Call) Run(run func(invoiceId uuid.UUID, companyId uuid.UUID)) *Service_DeleteInvoice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *Service_DeleteInvoice_Call) Return(_a0 error) *Service_DeleteInvoice_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Service_DeleteInvoice_Call) RunAndReturn(run func(uuid.UUID, uuid.UUID) error) *Service_DeleteInvoice_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteMaterialsByItem provides a mock function with given fields: itemId, materialId, companyId
func (_m *Service) DeleteMaterialsByItem(itemId uuid.UUID, materialId uuid.UUID, companyId uuid.UUID) error {
	ret := _m.Called(itemId, materialId, companyId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMaterialsByItem")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(itemId, materialId, companyId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Service_DeleteMaterialsByItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteMaterialsByItem'
type Service_DeleteMaterialsByItem_Call struct {
	*mock.Call
}

// DeleteMaterialsByItem is a helper method to define mock.On call
//   - itemId uuid.UUID
//   - materialId uuid.UUID
//   - companyId uuid.UUID
func (_e *Service_Expecter) DeleteMaterialsByItem(itemId interface{}, materialId interface{}, companyId interface{}) *Service_DeleteMaterialsByItem_Call {
	return &Service_DeleteMaterialsByItem_Call{Call: _e.mock.On("DeleteMaterialsByItem", itemId, materialId, companyId)}
}

func (_c *Service_DeleteMaterialsByItem_Call) Run(run func(itemId uuid.UUID, materialId uuid.UUID, companyId uuid.UUID)) *Service_DeleteMaterialsByItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(uuid.UUID), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *Service_DeleteMaterialsByItem_Call) Return(_a0 error) *Service_DeleteMaterialsByItem_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Service_DeleteMaterialsByItem_Call) RunAndReturn(run func(uuid.UUID, uuid.UUID, uuid.UUID) error) *Service_DeleteMaterialsByItem_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUser provides a mock function with given fields: id, companyId
func (_m *Service) DeleteUser(id uuid.UUID, companyId uuid.UUID) error {
	ret := _m.Called(id, companyId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(id, companyId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Service_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type Service_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - id uuid.UUID
//   - companyId uuid.UUID
func (_e *Service_Expecter) DeleteUser(id interface{}, companyId interface{}) *Service_DeleteUser_Call {
	return &Service_DeleteUser_Call{Call: _e.mock.On("DeleteUser", id, companyId)}
}

func (_c *Service_DeleteUser_Call) Run(run func(id uuid.UUID, companyId uuid.UUID)) *Service_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *Service_DeleteUser_Call) Return(_a0 error) *Service_DeleteUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Service_DeleteUser_Call) RunAndReturn(run func(uuid.UUID, uuid.UUID) error) *Service_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetActiveProjects provides a mock function with given fields: companyId, active
func (_m *Service) GetActiveProjects(companyId uuid.UUID, active bool) []types.Project {
	ret := _m.Called(companyId, active)

	if len(ret) == 0 {
		panic("no return value specified for GetActiveProjects")
	}

	var r0 []types.Project
	if rf, ok := ret.Get(0).(func(uuid.UUID, bool) []types.Project); ok {
		r0 = rf(companyId, active)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Project)
		}
	}

	return r0
}

// Service_GetActiveProjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetActiveProjects'
type Service_GetActiveProjects_Call struct {
	*mock.Call
}

// GetActiveProjects is a helper method to define mock.On call
//   - companyId uuid.UUID
//   - active bool
func (_e *Service_Expecter) GetActiveProjects(companyId interface{}, active interface{}) *Service_GetActiveProjects_Call {
	return &Service_GetActiveProjects_Call{Call: _e.mock.On("GetActiveProjects", companyId, active)}
}

func (_c *Service_GetActiveProjects_Call) Run(run func(companyId uuid.UUID, active bool)) *Service_GetActiveProjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(bool))
	})
	return _c
}

func (_c *Service_GetActiveProjects_Call) Return(_a0 []types.Project) *Service_GetActiveProjects_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Service_GetActiveProjects_Call) RunAndReturn(run func(uuid.UUID, bool) []types.Project) *Service_GetActiveProjects_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllCategories provides a mock function with given fields: companyId
func (_m *Service) GetAllCategories(companyId uuid.UUID) ([]types.Category, error) {
	ret := _m.Called(companyId)

	if len(ret) == 0 {
		panic("no return value specified for GetAllCategories")
	}

	var r0 []types.Category
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) ([]types.Category, error)); ok {
		return rf(companyId)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) []types.Category); ok {
		r0 = rf(companyId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Category)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(companyId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_GetAllCategories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllCategories'
type Service_GetAllCategories_Call struct {
	*mock.Call
}

// GetAllCategories is a helper method to define mock.On call
//   - companyId uuid.UUID
func (_e *Service_Expecter) GetAllCategories(companyId interface{}) *Service_GetAllCategories_Call {
	return &Service_GetAllCategories_Call{Call: _e.mock.On("GetAllCategories", companyId)}
}

func (_c *Service_GetAllCategories_Call) Run(run func(companyId uuid.UUID)) *Service_GetAllCategories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *Service_GetAllCategories_Call) Return(_a0 []types.Category, _a1 error) *Service_GetAllCategories_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_GetAllCategories_Call) RunAndReturn(run func(uuid.UUID) ([]types.Category, error)) *Service_GetAllCategories_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllDetails provides a mock function with given fields: invoiceId, companyId
func (_m *Service) GetAllDetails(invoiceId uuid.UUID, companyId uuid.UUID) ([]types.InvoiceDetailsResponse, error) {
	ret := _m.Called(invoiceId, companyId)

	if len(ret) == 0 {
		panic("no return value specified for GetAllDetails")
	}

	var r0 []types.InvoiceDetailsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) ([]types.InvoiceDetailsResponse, error)); ok {
		return rf(invoiceId, companyId)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) []types.InvoiceDetailsResponse); ok {
		r0 = rf(invoiceId, companyId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.InvoiceDetailsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(invoiceId, companyId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_GetAllDetails_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllDetails'
type Service_GetAllDetails_Call struct {
	*mock.Call
}

// GetAllDetails is a helper method to define mock.On call
//   - invoiceId uuid.UUID
//   - companyId uuid.UUID
func (_e *Service_Expecter) GetAllDetails(invoiceId interface{}, companyId interface{}) *Service_GetAllDetails_Call {
	return &Service_GetAllDetails_Call{Call: _e.mock.On("GetAllDetails", invoiceId, companyId)}
}

func (_c *Service_GetAllDetails_Call) Run(run func(invoiceId uuid.UUID, companyId uuid.UUID)) *Service_GetAllDetails_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *Service_GetAllDetails_Call) Return(_a0 []types.InvoiceDetailsResponse, _a1 error) *Service_GetAllDetails_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_GetAllDetails_Call) RunAndReturn(run func(uuid.UUID, uuid.UUID) ([]types.InvoiceDetailsResponse, error)) *Service_GetAllDetails_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllMaterials provides a mock function with given fields: companyId
func (_m *Service) GetAllMaterials(companyId uuid.UUID) []types.Material {
	ret := _m.Called(companyId)

	if len(ret) == 0 {
		panic("no return value specified for GetAllMaterials")
	}

	var r0 []types.Material
	if rf, ok := ret.Get(0).(func(uuid.UUID) []types.Material); ok {
		r0 = rf(companyId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Material)
		}
	}

	return r0
}

// Service_GetAllMaterials_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllMaterials'
type Service_GetAllMaterials_Call struct {
	*mock.Call
}

// GetAllMaterials is a helper method to define mock.On call
//   - companyId uuid.UUID
func (_e *Service_Expecter) GetAllMaterials(companyId interface{}) *Service_GetAllMaterials_Call {
	return &Service_GetAllMaterials_Call{Call: _e.mock.On("GetAllMaterials", companyId)}
}

func (_c *Service_GetAllMaterials_Call) Run(run func(companyId uuid.UUID)) *Service_GetAllMaterials_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *Service_GetAllMaterials_Call) Return(_a0 []types.Material) *Service_GetAllMaterials_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Service_GetAllMaterials_Call) RunAndReturn(run func(uuid.UUID) []types.Material) *Service_GetAllMaterials_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllProjects provides a mock function with given fields: companyId
func (_m *Service) GetAllProjects(companyId uuid.UUID, search string) ([]types.Project, error) {
	ret := _m.Called(companyId)

	if len(ret) == 0 {
		panic("no return value specified for GetAllProjects")
	}

	var r0 []types.Project
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) ([]types.Project, error)); ok {
		return rf(companyId)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) []types.Project); ok {
		r0 = rf(companyId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Project)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(companyId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_GetAllProjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllProjects'
type Service_GetAllProjects_Call struct {
	*mock.Call
}

// GetAllProjects is a helper method to define mock.On call
//   - companyId uuid.UUID
func (_e *Service_Expecter) GetAllProjects(companyId interface{}) *Service_GetAllProjects_Call {
	return &Service_GetAllProjects_Call{Call: _e.mock.On("GetAllProjects", companyId)}
}

func (_c *Service_GetAllProjects_Call) Run(run func(companyId uuid.UUID)) *Service_GetAllProjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *Service_GetAllProjects_Call) Return(_a0 []types.Project, _a1 error) *Service_GetAllProjects_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_GetAllProjects_Call) RunAndReturn(run func(uuid.UUID) ([]types.Project, error)) *Service_GetAllProjects_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllRubros provides a mock function with given fields: companyId
func (_m *Service) GetAllRubros(companyId uuid.UUID) ([]types.Rubro, error) {
	ret := _m.Called(companyId)

	if len(ret) == 0 {
		panic("no return value specified for GetAllRubros")
	}

	var r0 []types.Rubro
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) ([]types.Rubro, error)); ok {
		return rf(companyId)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) []types.Rubro); ok {
		r0 = rf(companyId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Rubro)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(companyId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_GetAllRubros_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllRubros'
type Service_GetAllRubros_Call struct {
	*mock.Call
}

// GetAllRubros is a helper method to define mock.On call
//   - companyId uuid.UUID
func (_e *Service_Expecter) GetAllRubros(companyId interface{}) *Service_GetAllRubros_Call {
	return &Service_GetAllRubros_Call{Call: _e.mock.On("GetAllRubros", companyId)}
}

func (_c *Service_GetAllRubros_Call) Run(run func(companyId uuid.UUID)) *Service_GetAllRubros_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *Service_GetAllRubros_Call) Return(_a0 []types.Rubro, _a1 error) *Service_GetAllRubros_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_GetAllRubros_Call) RunAndReturn(run func(uuid.UUID) ([]types.Rubro, error)) *Service_GetAllRubros_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllSuppliers provides a mock function with given fields: companyId, search
func (_m *Service) GetAllSuppliers(companyId uuid.UUID, search string) ([]types.Supplier, error) {
	ret := _m.Called(companyId, search)

	if len(ret) == 0 {
		panic("no return value specified for GetAllSuppliers")
	}

	var r0 []types.Supplier
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, string) ([]types.Supplier, error)); ok {
		return rf(companyId, search)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID, string) []types.Supplier); ok {
		r0 = rf(companyId, search)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Supplier)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID, string) error); ok {
		r1 = rf(companyId, search)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_GetAllSuppliers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllSuppliers'
type Service_GetAllSuppliers_Call struct {
	*mock.Call
}

// GetAllSuppliers is a helper method to define mock.On call
//   - companyId uuid.UUID
//   - search string
func (_e *Service_Expecter) GetAllSuppliers(companyId interface{}, search interface{}) *Service_GetAllSuppliers_Call {
	return &Service_GetAllSuppliers_Call{Call: _e.mock.On("GetAllSuppliers", companyId, search)}
}

func (_c *Service_GetAllSuppliers_Call) Run(run func(companyId uuid.UUID, search string)) *Service_GetAllSuppliers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(string))
	})
	return _c
}

func (_c *Service_GetAllSuppliers_Call) Return(_a0 []types.Supplier, _a1 error) *Service_GetAllSuppliers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_GetAllSuppliers_Call) RunAndReturn(run func(uuid.UUID, string) ([]types.Supplier, error)) *Service_GetAllSuppliers_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllUsers provides a mock function with given fields: companyId
func (_m *Service) GetAllUsers(companyId uuid.UUID) ([]types.User, error) {
	ret := _m.Called(companyId)

	if len(ret) == 0 {
		panic("no return value specified for GetAllUsers")
	}

	var r0 []types.User
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) ([]types.User, error)); ok {
		return rf(companyId)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) []types.User); ok {
		r0 = rf(companyId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.User)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(companyId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_GetAllUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllUsers'
type Service_GetAllUsers_Call struct {
	*mock.Call
}

// GetAllUsers is a helper method to define mock.On call
//   - companyId uuid.UUID
func (_e *Service_Expecter) GetAllUsers(companyId interface{}) *Service_GetAllUsers_Call {
	return &Service_GetAllUsers_Call{Call: _e.mock.On("GetAllUsers", companyId)}
}

func (_c *Service_GetAllUsers_Call) Run(run func(companyId uuid.UUID)) *Service_GetAllUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *Service_GetAllUsers_Call) Return(_a0 []types.User, _a1 error) *Service_GetAllUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_GetAllUsers_Call) RunAndReturn(run func(uuid.UUID) ([]types.User, error)) *Service_GetAllUsers_Call {
	_c.Call.Return(run)
	return _c
}

// GetBalance provides a mock function with given fields: companyId, projectId, date
func (_m *Service) GetBalance(companyId uuid.UUID, projectId uuid.UUID, date time.Time) types.BalanceResponse {
	ret := _m.Called(companyId, projectId, date)

	if len(ret) == 0 {
		panic("no return value specified for GetBalance")
	}

	var r0 types.BalanceResponse
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID, time.Time) types.BalanceResponse); ok {
		r0 = rf(companyId, projectId, date)
	} else {
		r0 = ret.Get(0).(types.BalanceResponse)
	}

	return r0
}

// Service_GetBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBalance'
type Service_GetBalance_Call struct {
	*mock.Call
}

// GetBalance is a helper method to define mock.On call
//   - companyId uuid.UUID
//   - projectId uuid.UUID
//   - date time.Time
func (_e *Service_Expecter) GetBalance(companyId interface{}, projectId interface{}, date interface{}) *Service_GetBalance_Call {
	return &Service_GetBalance_Call{Call: _e.mock.On("GetBalance", companyId, projectId, date)}
}

func (_c *Service_GetBalance_Call) Run(run func(companyId uuid.UUID, projectId uuid.UUID, date time.Time)) *Service_GetBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(uuid.UUID), args[2].(time.Time))
	})
	return _c
}

func (_c *Service_GetBalance_Call) Return(_a0 types.BalanceResponse) *Service_GetBalance_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Service_GetBalance_Call) RunAndReturn(run func(uuid.UUID, uuid.UUID, time.Time) types.BalanceResponse) *Service_GetBalance_Call {
	_c.Call.Return(run)
	return _c
}

// GetBudgetItems provides a mock function with given fields: companyId, search
func (_m *Service) GetBudgetItems(companyId uuid.UUID, search string) ([]types.BudgetItemResponse, error) {
	ret := _m.Called(companyId, search)

	if len(ret) == 0 {
		panic("no return value specified for GetBudgetItems")
	}

	var r0 []types.BudgetItemResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, string) ([]types.BudgetItemResponse, error)); ok {
		return rf(companyId, search)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID, string) []types.BudgetItemResponse); ok {
		r0 = rf(companyId, search)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.BudgetItemResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID, string) error); ok {
		r1 = rf(companyId, search)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_GetBudgetItems_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBudgetItems'
type Service_GetBudgetItems_Call struct {
	*mock.Call
}

// GetBudgetItems is a helper method to define mock.On call
//   - companyId uuid.UUID
//   - search string
func (_e *Service_Expecter) GetBudgetItems(companyId interface{}, search interface{}) *Service_GetBudgetItems_Call {
	return &Service_GetBudgetItems_Call{Call: _e.mock.On("GetBudgetItems", companyId, search)}
}

func (_c *Service_GetBudgetItems_Call) Run(run func(companyId uuid.UUID, search string)) *Service_GetBudgetItems_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(string))
	})
	return _c
}

func (_c *Service_GetBudgetItems_Call) Return(_a0 []types.BudgetItemResponse, _a1 error) *Service_GetBudgetItems_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_GetBudgetItems_Call) RunAndReturn(run func(uuid.UUID, string) ([]types.BudgetItemResponse, error)) *Service_GetBudgetItems_Call {
	_c.Call.Return(run)
	return _c
}

// GetBudgetItemsByAccumulate provides a mock function with given fields: companyId, accum
func (_m *Service) GetBudgetItemsByAccumulate(companyId uuid.UUID, accum bool) []types.BudgetItem {
	ret := _m.Called(companyId, accum)

	if len(ret) == 0 {
		panic("no return value specified for GetBudgetItemsByAccumulate")
	}

	var r0 []types.BudgetItem
	if rf, ok := ret.Get(0).(func(uuid.UUID, bool) []types.BudgetItem); ok {
		r0 = rf(companyId, accum)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.BudgetItem)
		}
	}

	return r0
}

// Service_GetBudgetItemsByAccumulate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBudgetItemsByAccumulate'
type Service_GetBudgetItemsByAccumulate_Call struct {
	*mock.Call
}

// GetBudgetItemsByAccumulate is a helper method to define mock.On call
//   - companyId uuid.UUID
//   - accum bool
func (_e *Service_Expecter) GetBudgetItemsByAccumulate(companyId interface{}, accum interface{}) *Service_GetBudgetItemsByAccumulate_Call {
	return &Service_GetBudgetItemsByAccumulate_Call{Call: _e.mock.On("GetBudgetItemsByAccumulate", companyId, accum)}
}

func (_c *Service_GetBudgetItemsByAccumulate_Call) Run(run func(companyId uuid.UUID, accum bool)) *Service_GetBudgetItemsByAccumulate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(bool))
	})
	return _c
}

func (_c *Service_GetBudgetItemsByAccumulate_Call) Return(_a0 []types.BudgetItem) *Service_GetBudgetItemsByAccumulate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Service_GetBudgetItemsByAccumulate_Call) RunAndReturn(run func(uuid.UUID, bool) []types.BudgetItem) *Service_GetBudgetItemsByAccumulate_Call {
	_c.Call.Return(run)
	return _c
}

// GetBudgetItemsByLevel provides a mock function with given fields: companyId, level
func (_m *Service) GetBudgetItemsByLevel(companyId uuid.UUID, level uint8) []types.BudgetItem {
	ret := _m.Called(companyId, level)

	if len(ret) == 0 {
		panic("no return value specified for GetBudgetItemsByLevel")
	}

	var r0 []types.BudgetItem
	if rf, ok := ret.Get(0).(func(uuid.UUID, uint8) []types.BudgetItem); ok {
		r0 = rf(companyId, level)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.BudgetItem)
		}
	}

	return r0
}

// Service_GetBudgetItemsByLevel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBudgetItemsByLevel'
type Service_GetBudgetItemsByLevel_Call struct {
	*mock.Call
}

// GetBudgetItemsByLevel is a helper method to define mock.On call
//   - companyId uuid.UUID
//   - level uint8
func (_e *Service_Expecter) GetBudgetItemsByLevel(companyId interface{}, level interface{}) *Service_GetBudgetItemsByLevel_Call {
	return &Service_GetBudgetItemsByLevel_Call{Call: _e.mock.On("GetBudgetItemsByLevel", companyId, level)}
}

func (_c *Service_GetBudgetItemsByLevel_Call) Run(run func(companyId uuid.UUID, level uint8)) *Service_GetBudgetItemsByLevel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(uint8))
	})
	return _c
}

func (_c *Service_GetBudgetItemsByLevel_Call) Return(_a0 []types.BudgetItem) *Service_GetBudgetItemsByLevel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Service_GetBudgetItemsByLevel_Call) RunAndReturn(run func(uuid.UUID, uint8) []types.BudgetItem) *Service_GetBudgetItemsByLevel_Call {
	_c.Call.Return(run)
	return _c
}

// GetBudgets provides a mock function with given fields: companyId, project_id, search
func (_m *Service) GetBudgets(companyId uuid.UUID, project_id uuid.UUID, search string) ([]types.GetBudget, error) {
	ret := _m.Called(companyId, project_id, search)

	if len(ret) == 0 {
		panic("no return value specified for GetBudgets")
	}

	var r0 []types.GetBudget
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID, string) ([]types.GetBudget, error)); ok {
		return rf(companyId, project_id, search)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID, string) []types.GetBudget); ok {
		r0 = rf(companyId, project_id, search)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.GetBudget)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID, uuid.UUID, string) error); ok {
		r1 = rf(companyId, project_id, search)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_GetBudgets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBudgets'
type Service_GetBudgets_Call struct {
	*mock.Call
}

// GetBudgets is a helper method to define mock.On call
//   - companyId uuid.UUID
//   - project_id uuid.UUID
//   - search string
func (_e *Service_Expecter) GetBudgets(companyId interface{}, project_id interface{}, search interface{}) *Service_GetBudgets_Call {
	return &Service_GetBudgets_Call{Call: _e.mock.On("GetBudgets", companyId, project_id, search)}
}

func (_c *Service_GetBudgets_Call) Run(run func(companyId uuid.UUID, project_id uuid.UUID, search string)) *Service_GetBudgets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(uuid.UUID), args[2].(string))
	})
	return _c
}

func (_c *Service_GetBudgets_Call) Return(_a0 []types.GetBudget, _a1 error) *Service_GetBudgets_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_GetBudgets_Call) RunAndReturn(run func(uuid.UUID, uuid.UUID, string) ([]types.GetBudget, error)) *Service_GetBudgets_Call {
	_c.Call.Return(run)
	return _c
}

// GetBudgetsByProjectId provides a mock function with given fields: companyId, projectId, level
func (_m *Service) GetBudgetsByProjectId(companyId uuid.UUID, projectId uuid.UUID, level *uint8) ([]types.GetBudget, error) {
	ret := _m.Called(companyId, projectId, level)

	if len(ret) == 0 {
		panic("no return value specified for GetBudgetsByProjectId")
	}

	var r0 []types.GetBudget
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID, *uint8) ([]types.GetBudget, error)); ok {
		return rf(companyId, projectId, level)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID, *uint8) []types.GetBudget); ok {
		r0 = rf(companyId, projectId, level)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.GetBudget)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID, uuid.UUID, *uint8) error); ok {
		r1 = rf(companyId, projectId, level)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_GetBudgetsByProjectId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBudgetsByProjectId'
type Service_GetBudgetsByProjectId_Call struct {
	*mock.Call
}

// GetBudgetsByProjectId is a helper method to define mock.On call
//   - companyId uuid.UUID
//   - projectId uuid.UUID
//   - level *uint8
func (_e *Service_Expecter) GetBudgetsByProjectId(companyId interface{}, projectId interface{}, level interface{}) *Service_GetBudgetsByProjectId_Call {
	return &Service_GetBudgetsByProjectId_Call{Call: _e.mock.On("GetBudgetsByProjectId", companyId, projectId, level)}
}

func (_c *Service_GetBudgetsByProjectId_Call) Run(run func(companyId uuid.UUID, projectId uuid.UUID, level *uint8)) *Service_GetBudgetsByProjectId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(uuid.UUID), args[2].(*uint8))
	})
	return _c
}

func (_c *Service_GetBudgetsByProjectId_Call) Return(_a0 []types.GetBudget, _a1 error) *Service_GetBudgetsByProjectId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_GetBudgetsByProjectId_Call) RunAndReturn(run func(uuid.UUID, uuid.UUID, *uint8) ([]types.GetBudget, error)) *Service_GetBudgetsByProjectId_Call {
	_c.Call.Return(run)
	return _c
}

// GetCategory provides a mock function with given fields: id, companyId
func (_m *Service) GetCategory(id uuid.UUID, companyId uuid.UUID) (types.Category, error) {
	ret := _m.Called(id, companyId)

	if len(ret) == 0 {
		panic("no return value specified for GetCategory")
	}

	var r0 types.Category
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) (types.Category, error)); ok {
		return rf(id, companyId)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) types.Category); ok {
		r0 = rf(id, companyId)
	} else {
		r0 = ret.Get(0).(types.Category)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(id, companyId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_GetCategory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCategory'
type Service_GetCategory_Call struct {
	*mock.Call
}

// GetCategory is a helper method to define mock.On call
//   - id uuid.UUID
//   - companyId uuid.UUID
func (_e *Service_Expecter) GetCategory(id interface{}, companyId interface{}) *Service_GetCategory_Call {
	return &Service_GetCategory_Call{Call: _e.mock.On("GetCategory", id, companyId)}
}

func (_c *Service_GetCategory_Call) Run(run func(id uuid.UUID, companyId uuid.UUID)) *Service_GetCategory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *Service_GetCategory_Call) Return(_a0 types.Category, _a1 error) *Service_GetCategory_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_GetCategory_Call) RunAndReturn(run func(uuid.UUID, uuid.UUID) (types.Category, error)) *Service_GetCategory_Call {
	_c.Call.Return(run)
	return _c
}

// GetDetailsByBudgetItem provides a mock function with given fields: companyId, projectId, budgetItemId, date, ids
func (_m *Service) GetDetailsByBudgetItem(companyId uuid.UUID, projectId uuid.UUID, budgetItemId uuid.UUID, date time.Time, ids []uuid.UUID) []types.InvoiceDetails {
	ret := _m.Called(companyId, projectId, budgetItemId, date, ids)

	if len(ret) == 0 {
		panic("no return value specified for GetDetailsByBudgetItem")
	}

	var r0 []types.InvoiceDetails
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID, uuid.UUID, time.Time, []uuid.UUID) []types.InvoiceDetails); ok {
		r0 = rf(companyId, projectId, budgetItemId, date, ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.InvoiceDetails)
		}
	}

	return r0
}

// Service_GetDetailsByBudgetItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDetailsByBudgetItem'
type Service_GetDetailsByBudgetItem_Call struct {
	*mock.Call
}

// GetDetailsByBudgetItem is a helper method to define mock.On call
//   - companyId uuid.UUID
//   - projectId uuid.UUID
//   - budgetItemId uuid.UUID
//   - date time.Time
//   - ids []uuid.UUID
func (_e *Service_Expecter) GetDetailsByBudgetItem(companyId interface{}, projectId interface{}, budgetItemId interface{}, date interface{}, ids interface{}) *Service_GetDetailsByBudgetItem_Call {
	return &Service_GetDetailsByBudgetItem_Call{Call: _e.mock.On("GetDetailsByBudgetItem", companyId, projectId, budgetItemId, date, ids)}
}

func (_c *Service_GetDetailsByBudgetItem_Call) Run(run func(companyId uuid.UUID, projectId uuid.UUID, budgetItemId uuid.UUID, date time.Time, ids []uuid.UUID)) *Service_GetDetailsByBudgetItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(uuid.UUID), args[2].(uuid.UUID), args[3].(time.Time), args[4].([]uuid.UUID))
	})
	return _c
}

func (_c *Service_GetDetailsByBudgetItem_Call) Return(_a0 []types.InvoiceDetails) *Service_GetDetailsByBudgetItem_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Service_GetDetailsByBudgetItem_Call) RunAndReturn(run func(uuid.UUID, uuid.UUID, uuid.UUID, time.Time, []uuid.UUID) []types.InvoiceDetails) *Service_GetDetailsByBudgetItem_Call {
	_c.Call.Return(run)
	return _c
}

// GetHistoricByProject provides a mock function with given fields: companyId, projectId, date, level
func (_m *Service) GetHistoricByProject(companyId uuid.UUID, projectId uuid.UUID, date time.Time, level uint8) []types.GetBudget {
	ret := _m.Called(companyId, projectId, date, level)

	if len(ret) == 0 {
		panic("no return value specified for GetHistoricByProject")
	}

	var r0 []types.GetBudget
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID, time.Time, uint8) []types.GetBudget); ok {
		r0 = rf(companyId, projectId, date, level)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.GetBudget)
		}
	}

	return r0
}

// Service_GetHistoricByProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHistoricByProject'
type Service_GetHistoricByProject_Call struct {
	*mock.Call
}

// GetHistoricByProject is a helper method to define mock.On call
//   - companyId uuid.UUID
//   - projectId uuid.UUID
//   - date time.Time
//   - level uint8
func (_e *Service_Expecter) GetHistoricByProject(companyId interface{}, projectId interface{}, date interface{}, level interface{}) *Service_GetHistoricByProject_Call {
	return &Service_GetHistoricByProject_Call{Call: _e.mock.On("GetHistoricByProject", companyId, projectId, date, level)}
}

func (_c *Service_GetHistoricByProject_Call) Run(run func(companyId uuid.UUID, projectId uuid.UUID, date time.Time, level uint8)) *Service_GetHistoricByProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(uuid.UUID), args[2].(time.Time), args[3].(uint8))
	})
	return _c
}

func (_c *Service_GetHistoricByProject_Call) Return(_a0 []types.GetBudget) *Service_GetHistoricByProject_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Service_GetHistoricByProject_Call) RunAndReturn(run func(uuid.UUID, uuid.UUID, time.Time, uint8) []types.GetBudget) *Service_GetHistoricByProject_Call {
	_c.Call.Return(run)
	return _c
}

// GetInvoices provides a mock function with given fields: companyId
func (_m *Service) GetInvoices(companyId uuid.UUID) ([]types.InvoiceResponse, error) {
	ret := _m.Called(companyId)

	if len(ret) == 0 {
		panic("no return value specified for GetInvoices")
	}

	var r0 []types.InvoiceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) ([]types.InvoiceResponse, error)); ok {
		return rf(companyId)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) []types.InvoiceResponse); ok {
		r0 = rf(companyId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.InvoiceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(companyId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_GetInvoices_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInvoices'
type Service_GetInvoices_Call struct {
	*mock.Call
}

// GetInvoices is a helper method to define mock.On call
//   - companyId uuid.UUID
func (_e *Service_Expecter) GetInvoices(companyId interface{}) *Service_GetInvoices_Call {
	return &Service_GetInvoices_Call{Call: _e.mock.On("GetInvoices", companyId)}
}

func (_c *Service_GetInvoices_Call) Run(run func(companyId uuid.UUID)) *Service_GetInvoices_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *Service_GetInvoices_Call) Return(_a0 []types.InvoiceResponse, _a1 error) *Service_GetInvoices_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_GetInvoices_Call) RunAndReturn(run func(uuid.UUID) ([]types.InvoiceResponse, error)) *Service_GetInvoices_Call {
	_c.Call.Return(run)
	return _c
}

// GetMaterial provides a mock function with given fields: id, companyId
func (_m *Service) GetMaterial(id uuid.UUID, companyId uuid.UUID) (types.Material, error) {
	ret := _m.Called(id, companyId)

	if len(ret) == 0 {
		panic("no return value specified for GetMaterial")
	}

	var r0 types.Material
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) (types.Material, error)); ok {
		return rf(id, companyId)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) types.Material); ok {
		r0 = rf(id, companyId)
	} else {
		r0 = ret.Get(0).(types.Material)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(id, companyId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_GetMaterial_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMaterial'
type Service_GetMaterial_Call struct {
	*mock.Call
}

// GetMaterial is a helper method to define mock.On call
//   - id uuid.UUID
//   - companyId uuid.UUID
func (_e *Service_Expecter) GetMaterial(id interface{}, companyId interface{}) *Service_GetMaterial_Call {
	return &Service_GetMaterial_Call{Call: _e.mock.On("GetMaterial", id, companyId)}
}

func (_c *Service_GetMaterial_Call) Run(run func(id uuid.UUID, companyId uuid.UUID)) *Service_GetMaterial_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *Service_GetMaterial_Call) Return(_a0 types.Material, _a1 error) *Service_GetMaterial_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_GetMaterial_Call) RunAndReturn(run func(uuid.UUID, uuid.UUID) (types.Material, error)) *Service_GetMaterial_Call {
	_c.Call.Return(run)
	return _c
}

// GetMaterialsByItem provides a mock function with given fields: id, companyId
func (_m *Service) GetMaterialsByItem(id uuid.UUID, companyId uuid.UUID) []types.ACU {
	ret := _m.Called(id, companyId)

	if len(ret) == 0 {
		panic("no return value specified for GetMaterialsByItem")
	}

	var r0 []types.ACU
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) []types.ACU); ok {
		r0 = rf(id, companyId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.ACU)
		}
	}

	return r0
}

// Service_GetMaterialsByItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMaterialsByItem'
type Service_GetMaterialsByItem_Call struct {
	*mock.Call
}

// GetMaterialsByItem is a helper method to define mock.On call
//   - id uuid.UUID
//   - companyId uuid.UUID
func (_e *Service_Expecter) GetMaterialsByItem(id interface{}, companyId interface{}) *Service_GetMaterialsByItem_Call {
	return &Service_GetMaterialsByItem_Call{Call: _e.mock.On("GetMaterialsByItem", id, companyId)}
}

func (_c *Service_GetMaterialsByItem_Call) Run(run func(id uuid.UUID, companyId uuid.UUID)) *Service_GetMaterialsByItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *Service_GetMaterialsByItem_Call) Return(_a0 []types.ACU) *Service_GetMaterialsByItem_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Service_GetMaterialsByItem_Call) RunAndReturn(run func(uuid.UUID, uuid.UUID) []types.ACU) *Service_GetMaterialsByItem_Call {
	_c.Call.Return(run)
	return _c
}

// GetNonAccumulateChildren provides a mock function with given fields: companyId, id, budgetItems, results
func (_m *Service) GetNonAccumulateChildren(companyId *uuid.UUID, id *uuid.UUID, budgetItems []types.BudgetItem, results []uuid.UUID) []uuid.UUID {
	ret := _m.Called(companyId, id, budgetItems, results)

	if len(ret) == 0 {
		panic("no return value specified for GetNonAccumulateChildren")
	}

	var r0 []uuid.UUID
	if rf, ok := ret.Get(0).(func(*uuid.UUID, *uuid.UUID, []types.BudgetItem, []uuid.UUID) []uuid.UUID); ok {
		r0 = rf(companyId, id, budgetItems, results)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]uuid.UUID)
		}
	}

	return r0
}

// Service_GetNonAccumulateChildren_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNonAccumulateChildren'
type Service_GetNonAccumulateChildren_Call struct {
	*mock.Call
}

// GetNonAccumulateChildren is a helper method to define mock.On call
//   - companyId *uuid.UUID
//   - id *uuid.UUID
//   - budgetItems []types.BudgetItem
//   - results []uuid.UUID
func (_e *Service_Expecter) GetNonAccumulateChildren(companyId interface{}, id interface{}, budgetItems interface{}, results interface{}) *Service_GetNonAccumulateChildren_Call {
	return &Service_GetNonAccumulateChildren_Call{Call: _e.mock.On("GetNonAccumulateChildren", companyId, id, budgetItems, results)}
}

func (_c *Service_GetNonAccumulateChildren_Call) Run(run func(companyId *uuid.UUID, id *uuid.UUID, budgetItems []types.BudgetItem, results []uuid.UUID)) *Service_GetNonAccumulateChildren_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*uuid.UUID), args[1].(*uuid.UUID), args[2].([]types.BudgetItem), args[3].([]uuid.UUID))
	})
	return _c
}

func (_c *Service_GetNonAccumulateChildren_Call) Return(_a0 []uuid.UUID) *Service_GetNonAccumulateChildren_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Service_GetNonAccumulateChildren_Call) RunAndReturn(run func(*uuid.UUID, *uuid.UUID, []types.BudgetItem, []uuid.UUID) []uuid.UUID) *Service_GetNonAccumulateChildren_Call {
	_c.Call.Return(run)
	return _c
}

// GetOneBudget provides a mock function with given fields: companyId, projectId, budgetItemId
func (_m *Service) GetOneBudget(companyId uuid.UUID, projectId uuid.UUID, budgetItemId uuid.UUID) (*types.GetBudget, error) {
	ret := _m.Called(companyId, projectId, budgetItemId)

	if len(ret) == 0 {
		panic("no return value specified for GetOneBudget")
	}

	var r0 *types.GetBudget
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID, uuid.UUID) (*types.GetBudget, error)); ok {
		return rf(companyId, projectId, budgetItemId)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID, uuid.UUID) *types.GetBudget); ok {
		r0 = rf(companyId, projectId, budgetItemId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.GetBudget)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID, uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(companyId, projectId, budgetItemId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_GetOneBudget_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOneBudget'
type Service_GetOneBudget_Call struct {
	*mock.Call
}

// GetOneBudget is a helper method to define mock.On call
//   - companyId uuid.UUID
//   - projectId uuid.UUID
//   - budgetItemId uuid.UUID
func (_e *Service_Expecter) GetOneBudget(companyId interface{}, projectId interface{}, budgetItemId interface{}) *Service_GetOneBudget_Call {
	return &Service_GetOneBudget_Call{Call: _e.mock.On("GetOneBudget", companyId, projectId, budgetItemId)}
}

func (_c *Service_GetOneBudget_Call) Run(run func(companyId uuid.UUID, projectId uuid.UUID, budgetItemId uuid.UUID)) *Service_GetOneBudget_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(uuid.UUID), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *Service_GetOneBudget_Call) Return(_a0 *types.GetBudget, _a1 error) *Service_GetOneBudget_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_GetOneBudget_Call) RunAndReturn(run func(uuid.UUID, uuid.UUID, uuid.UUID) (*types.GetBudget, error)) *Service_GetOneBudget_Call {
	_c.Call.Return(run)
	return _c
}

// GetOneBudgetItem provides a mock function with given fields: id, companyId
func (_m *Service) GetOneBudgetItem(id uuid.UUID, companyId uuid.UUID) (*types.BudgetItem, error) {
	ret := _m.Called(id, companyId)

	if len(ret) == 0 {
		panic("no return value specified for GetOneBudgetItem")
	}

	var r0 *types.BudgetItem
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) (*types.BudgetItem, error)); ok {
		return rf(id, companyId)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) *types.BudgetItem); ok {
		r0 = rf(id, companyId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.BudgetItem)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(id, companyId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_GetOneBudgetItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOneBudgetItem'
type Service_GetOneBudgetItem_Call struct {
	*mock.Call
}

// GetOneBudgetItem is a helper method to define mock.On call
//   - id uuid.UUID
//   - companyId uuid.UUID
func (_e *Service_Expecter) GetOneBudgetItem(id interface{}, companyId interface{}) *Service_GetOneBudgetItem_Call {
	return &Service_GetOneBudgetItem_Call{Call: _e.mock.On("GetOneBudgetItem", id, companyId)}
}

func (_c *Service_GetOneBudgetItem_Call) Run(run func(id uuid.UUID, companyId uuid.UUID)) *Service_GetOneBudgetItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *Service_GetOneBudgetItem_Call) Return(_a0 *types.BudgetItem, _a1 error) *Service_GetOneBudgetItem_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_GetOneBudgetItem_Call) RunAndReturn(run func(uuid.UUID, uuid.UUID) (*types.BudgetItem, error)) *Service_GetOneBudgetItem_Call {
	_c.Call.Return(run)
	return _c
}

// GetOneInvoice provides a mock function with given fields: invoiceId, companyId
func (_m *Service) GetOneInvoice(invoiceId uuid.UUID, companyId uuid.UUID) (types.InvoiceResponse, error) {
	ret := _m.Called(invoiceId, companyId)

	if len(ret) == 0 {
		panic("no return value specified for GetOneInvoice")
	}

	var r0 types.InvoiceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) (types.InvoiceResponse, error)); ok {
		return rf(invoiceId, companyId)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) types.InvoiceResponse); ok {
		r0 = rf(invoiceId, companyId)
	} else {
		r0 = ret.Get(0).(types.InvoiceResponse)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(invoiceId, companyId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_GetOneInvoice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOneInvoice'
type Service_GetOneInvoice_Call struct {
	*mock.Call
}

// GetOneInvoice is a helper method to define mock.On call
//   - invoiceId uuid.UUID
//   - companyId uuid.UUID
func (_e *Service_Expecter) GetOneInvoice(invoiceId interface{}, companyId interface{}) *Service_GetOneInvoice_Call {
	return &Service_GetOneInvoice_Call{Call: _e.mock.On("GetOneInvoice", invoiceId, companyId)}
}

func (_c *Service_GetOneInvoice_Call) Run(run func(invoiceId uuid.UUID, companyId uuid.UUID)) *Service_GetOneInvoice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *Service_GetOneInvoice_Call) Return(_a0 types.InvoiceResponse, _a1 error) *Service_GetOneInvoice_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_GetOneInvoice_Call) RunAndReturn(run func(uuid.UUID, uuid.UUID) (types.InvoiceResponse, error)) *Service_GetOneInvoice_Call {
	_c.Call.Return(run)
	return _c
}

// GetOneQuantityById provides a mock function with given fields: id, companyId
func (_m *Service) GetOneQuantityById(id uuid.UUID, companyId uuid.UUID) types.Quantity {
	ret := _m.Called(id, companyId)

	if len(ret) == 0 {
		panic("no return value specified for GetOneQuantityById")
	}

	var r0 types.Quantity
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) types.Quantity); ok {
		r0 = rf(id, companyId)
	} else {
		r0 = ret.Get(0).(types.Quantity)
	}

	return r0
}

// Service_GetOneQuantityById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOneQuantityById'
type Service_GetOneQuantityById_Call struct {
	*mock.Call
}

// GetOneQuantityById is a helper method to define mock.On call
//   - id uuid.UUID
//   - companyId uuid.UUID
func (_e *Service_Expecter) GetOneQuantityById(id interface{}, companyId interface{}) *Service_GetOneQuantityById_Call {
	return &Service_GetOneQuantityById_Call{Call: _e.mock.On("GetOneQuantityById", id, companyId)}
}

func (_c *Service_GetOneQuantityById_Call) Run(run func(id uuid.UUID, companyId uuid.UUID)) *Service_GetOneQuantityById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *Service_GetOneQuantityById_Call) Return(_a0 types.Quantity) *Service_GetOneQuantityById_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Service_GetOneQuantityById_Call) RunAndReturn(run func(uuid.UUID, uuid.UUID) types.Quantity) *Service_GetOneQuantityById_Call {
	_c.Call.Return(run)
	return _c
}

// GetOneRubro provides a mock function with given fields: id, companyId
func (_m *Service) GetOneRubro(id uuid.UUID, companyId uuid.UUID) (types.Rubro, error) {
	ret := _m.Called(id, companyId)

	if len(ret) == 0 {
		panic("no return value specified for GetOneRubro")
	}

	var r0 types.Rubro
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) (types.Rubro, error)); ok {
		return rf(id, companyId)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) types.Rubro); ok {
		r0 = rf(id, companyId)
	} else {
		r0 = ret.Get(0).(types.Rubro)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(id, companyId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_GetOneRubro_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOneRubro'
type Service_GetOneRubro_Call struct {
	*mock.Call
}

// GetOneRubro is a helper method to define mock.On call
//   - id uuid.UUID
//   - companyId uuid.UUID
func (_e *Service_Expecter) GetOneRubro(id interface{}, companyId interface{}) *Service_GetOneRubro_Call {
	return &Service_GetOneRubro_Call{Call: _e.mock.On("GetOneRubro", id, companyId)}
}

func (_c *Service_GetOneRubro_Call) Run(run func(id uuid.UUID, companyId uuid.UUID)) *Service_GetOneRubro_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *Service_GetOneRubro_Call) Return(_a0 types.Rubro, _a1 error) *Service_GetOneRubro_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_GetOneRubro_Call) RunAndReturn(run func(uuid.UUID, uuid.UUID) (types.Rubro, error)) *Service_GetOneRubro_Call {
	_c.Call.Return(run)
	return _c
}

// GetOneSupplier provides a mock function with given fields: id, companyId
func (_m *Service) GetOneSupplier(id uuid.UUID, companyId uuid.UUID) (types.Supplier, error) {
	ret := _m.Called(id, companyId)

	if len(ret) == 0 {
		panic("no return value specified for GetOneSupplier")
	}

	var r0 types.Supplier
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) (types.Supplier, error)); ok {
		return rf(id, companyId)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) types.Supplier); ok {
		r0 = rf(id, companyId)
	} else {
		r0 = ret.Get(0).(types.Supplier)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(id, companyId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_GetOneSupplier_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOneSupplier'
type Service_GetOneSupplier_Call struct {
	*mock.Call
}

// GetOneSupplier is a helper method to define mock.On call
//   - id uuid.UUID
//   - companyId uuid.UUID
func (_e *Service_Expecter) GetOneSupplier(id interface{}, companyId interface{}) *Service_GetOneSupplier_Call {
	return &Service_GetOneSupplier_Call{Call: _e.mock.On("GetOneSupplier", id, companyId)}
}

func (_c *Service_GetOneSupplier_Call) Run(run func(id uuid.UUID, companyId uuid.UUID)) *Service_GetOneSupplier_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *Service_GetOneSupplier_Call) Return(_a0 types.Supplier, _a1 error) *Service_GetOneSupplier_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_GetOneSupplier_Call) RunAndReturn(run func(uuid.UUID, uuid.UUID) (types.Supplier, error)) *Service_GetOneSupplier_Call {
	_c.Call.Return(run)
	return _c
}

// GetProject provides a mock function with given fields: id, companyId
func (_m *Service) GetProject(id uuid.UUID, companyId uuid.UUID) (types.Project, error) {
	ret := _m.Called(id, companyId)

	if len(ret) == 0 {
		panic("no return value specified for GetProject")
	}

	var r0 types.Project
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) (types.Project, error)); ok {
		return rf(id, companyId)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) types.Project); ok {
		r0 = rf(id, companyId)
	} else {
		r0 = ret.Get(0).(types.Project)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(id, companyId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_GetProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProject'
type Service_GetProject_Call struct {
	*mock.Call
}

// GetProject is a helper method to define mock.On call
//   - id uuid.UUID
//   - companyId uuid.UUID
func (_e *Service_Expecter) GetProject(id interface{}, companyId interface{}) *Service_GetProject_Call {
	return &Service_GetProject_Call{Call: _e.mock.On("GetProject", id, companyId)}
}

func (_c *Service_GetProject_Call) Run(run func(id uuid.UUID, companyId uuid.UUID)) *Service_GetProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *Service_GetProject_Call) Return(_a0 types.Project, _a1 error) *Service_GetProject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_GetProject_Call) RunAndReturn(run func(uuid.UUID, uuid.UUID) (types.Project, error)) *Service_GetProject_Call {
	_c.Call.Return(run)
	return _c
}

// GetQuantityByMaterialAndItem provides a mock function with given fields: itemId, materialId, companyId
func (_m *Service) GetQuantityByMaterialAndItem(itemId uuid.UUID, materialId uuid.UUID, companyId uuid.UUID) types.ItemMaterialType {
	ret := _m.Called(itemId, materialId, companyId)

	if len(ret) == 0 {
		panic("no return value specified for GetQuantityByMaterialAndItem")
	}

	var r0 types.ItemMaterialType
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID, uuid.UUID) types.ItemMaterialType); ok {
		r0 = rf(itemId, materialId, companyId)
	} else {
		r0 = ret.Get(0).(types.ItemMaterialType)
	}

	return r0
}

// Service_GetQuantityByMaterialAndItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetQuantityByMaterialAndItem'
type Service_GetQuantityByMaterialAndItem_Call struct {
	*mock.Call
}

// GetQuantityByMaterialAndItem is a helper method to define mock.On call
//   - itemId uuid.UUID
//   - materialId uuid.UUID
//   - companyId uuid.UUID
func (_e *Service_Expecter) GetQuantityByMaterialAndItem(itemId interface{}, materialId interface{}, companyId interface{}) *Service_GetQuantityByMaterialAndItem_Call {
	return &Service_GetQuantityByMaterialAndItem_Call{Call: _e.mock.On("GetQuantityByMaterialAndItem", itemId, materialId, companyId)}
}

func (_c *Service_GetQuantityByMaterialAndItem_Call) Run(run func(itemId uuid.UUID, materialId uuid.UUID, companyId uuid.UUID)) *Service_GetQuantityByMaterialAndItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(uuid.UUID), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *Service_GetQuantityByMaterialAndItem_Call) Return(_a0 types.ItemMaterialType) *Service_GetQuantityByMaterialAndItem_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Service_GetQuantityByMaterialAndItem_Call) RunAndReturn(run func(uuid.UUID, uuid.UUID, uuid.UUID) types.ItemMaterialType) *Service_GetQuantityByMaterialAndItem_Call {
	_c.Call.Return(run)
	return _c
}

// GetSpentByBudgetItem provides a mock function with given fields: companyId, projectId, budgetItemId, date, ids
func (_m *Service) GetSpentByBudgetItem(companyId uuid.UUID, projectId uuid.UUID, budgetItemId uuid.UUID, date time.Time, ids []uuid.UUID) float64 {
	ret := _m.Called(companyId, projectId, budgetItemId, date, ids)

	if len(ret) == 0 {
		panic("no return value specified for GetSpentByBudgetItem")
	}

	var r0 float64
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID, uuid.UUID, time.Time, []uuid.UUID) float64); ok {
		r0 = rf(companyId, projectId, budgetItemId, date, ids)
	} else {
		r0 = ret.Get(0).(float64)
	}

	return r0
}

// Service_GetSpentByBudgetItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSpentByBudgetItem'
type Service_GetSpentByBudgetItem_Call struct {
	*mock.Call
}

// GetSpentByBudgetItem is a helper method to define mock.On call
//   - companyId uuid.UUID
//   - projectId uuid.UUID
//   - budgetItemId uuid.UUID
//   - date time.Time
//   - ids []uuid.UUID
func (_e *Service_Expecter) GetSpentByBudgetItem(companyId interface{}, projectId interface{}, budgetItemId interface{}, date interface{}, ids interface{}) *Service_GetSpentByBudgetItem_Call {
	return &Service_GetSpentByBudgetItem_Call{Call: _e.mock.On("GetSpentByBudgetItem", companyId, projectId, budgetItemId, date, ids)}
}

func (_c *Service_GetSpentByBudgetItem_Call) Run(run func(companyId uuid.UUID, projectId uuid.UUID, budgetItemId uuid.UUID, date time.Time, ids []uuid.UUID)) *Service_GetSpentByBudgetItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(uuid.UUID), args[2].(uuid.UUID), args[3].(time.Time), args[4].([]uuid.UUID))
	})
	return _c
}

func (_c *Service_GetSpentByBudgetItem_Call) Return(_a0 float64) *Service_GetSpentByBudgetItem_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Service_GetSpentByBudgetItem_Call) RunAndReturn(run func(uuid.UUID, uuid.UUID, uuid.UUID, time.Time, []uuid.UUID) float64) *Service_GetSpentByBudgetItem_Call {
	_c.Call.Return(run)
	return _c
}

// GetUser provides a mock function with given fields: id, companyId
func (_m *Service) GetUser(id uuid.UUID, companyId uuid.UUID) (types.User, error) {
	ret := _m.Called(id, companyId)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 types.User
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) (types.User, error)); ok {
		return rf(id, companyId)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) types.User); ok {
		r0 = rf(id, companyId)
	} else {
		r0 = ret.Get(0).(types.User)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(id, companyId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type Service_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - id uuid.UUID
//   - companyId uuid.UUID
func (_e *Service_Expecter) GetUser(id interface{}, companyId interface{}) *Service_GetUser_Call {
	return &Service_GetUser_Call{Call: _e.mock.On("GetUser", id, companyId)}
}

func (_c *Service_GetUser_Call) Run(run func(id uuid.UUID, companyId uuid.UUID)) *Service_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *Service_GetUser_Call) Return(_a0 types.User, _a1 error) *Service_GetUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_GetUser_Call) RunAndReturn(run func(uuid.UUID, uuid.UUID) (types.User, error)) *Service_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// Health provides a mock function with given fields:
func (_m *Service) Health() map[string]string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Health")
	}

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func() map[string]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	return r0
}

// Service_Health_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Health'
type Service_Health_Call struct {
	*mock.Call
}

// Health is a helper method to define mock.On call
func (_e *Service_Expecter) Health() *Service_Health_Call {
	return &Service_Health_Call{Call: _e.mock.On("Health")}
}

func (_c *Service_Health_Call) Run(run func()) *Service_Health_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Service_Health_Call) Return(_a0 map[string]string) *Service_Health_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Service_Health_Call) RunAndReturn(run func() map[string]string) *Service_Health_Call {
	_c.Call.Return(run)
	return _c
}

// IsLoggedIn provides a mock function with given fields: token, user
func (_m *Service) IsLoggedIn(token string, user uuid.UUID) bool {
	ret := _m.Called(token, user)

	if len(ret) == 0 {
		panic("no return value specified for IsLoggedIn")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, uuid.UUID) bool); ok {
		r0 = rf(token, user)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Service_IsLoggedIn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsLoggedIn'
type Service_IsLoggedIn_Call struct {
	*mock.Call
}

// IsLoggedIn is a helper method to define mock.On call
//   - token string
//   - user uuid.UUID
func (_e *Service_Expecter) IsLoggedIn(token interface{}, user interface{}) *Service_IsLoggedIn_Call {
	return &Service_IsLoggedIn_Call{Call: _e.mock.On("IsLoggedIn", token, user)}
}

func (_c *Service_IsLoggedIn_Call) Run(run func(token string, user uuid.UUID)) *Service_IsLoggedIn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *Service_IsLoggedIn_Call) Return(_a0 bool) *Service_IsLoggedIn_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Service_IsLoggedIn_Call) RunAndReturn(run func(string, uuid.UUID) bool) *Service_IsLoggedIn_Call {
	_c.Call.Return(run)
	return _c
}

// Levels provides a mock function with given fields: companyId
func (_m *Service) Levels(companyId uuid.UUID) []types.Select {
	ret := _m.Called(companyId)

	if len(ret) == 0 {
		panic("no return value specified for Levels")
	}

	var r0 []types.Select
	if rf, ok := ret.Get(0).(func(uuid.UUID) []types.Select); ok {
		r0 = rf(companyId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Select)
		}
	}

	return r0
}

// Service_Levels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Levels'
type Service_Levels_Call struct {
	*mock.Call
}

// Levels is a helper method to define mock.On call
//   - companyId uuid.UUID
func (_e *Service_Expecter) Levels(companyId interface{}) *Service_Levels_Call {
	return &Service_Levels_Call{Call: _e.mock.On("Levels", companyId)}
}

func (_c *Service_Levels_Call) Run(run func(companyId uuid.UUID)) *Service_Levels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *Service_Levels_Call) Return(_a0 []types.Select) *Service_Levels_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Service_Levels_Call) RunAndReturn(run func(uuid.UUID) []types.Select) *Service_Levels_Call {
	_c.Call.Return(run)
	return _c
}

// LoadDummyData provides a mock function with given fields: companyId
func (_m *Service) LoadDummyData(companyId uuid.UUID) error {
	ret := _m.Called(companyId)

	if len(ret) == 0 {
		panic("no return value specified for LoadDummyData")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(companyId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Service_LoadDummyData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadDummyData'
type Service_LoadDummyData_Call struct {
	*mock.Call
}

// LoadDummyData is a helper method to define mock.On call
//   - companyId uuid.UUID
func (_e *Service_Expecter) LoadDummyData(companyId interface{}) *Service_LoadDummyData_Call {
	return &Service_LoadDummyData_Call{Call: _e.mock.On("LoadDummyData", companyId)}
}

func (_c *Service_LoadDummyData_Call) Run(run func(companyId uuid.UUID)) *Service_LoadDummyData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *Service_LoadDummyData_Call) Return(_a0 error) *Service_LoadDummyData_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Service_LoadDummyData_Call) RunAndReturn(run func(uuid.UUID) error) *Service_LoadDummyData_Call {
	_c.Call.Return(run)
	return _c
}

// Login provides a mock function with given fields: l
func (_m *Service) Login(l *types.Login) (string, *types.User, error) {
	ret := _m.Called(l)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 string
	var r1 *types.User
	var r2 error
	if rf, ok := ret.Get(0).(func(*types.Login) (string, *types.User, error)); ok {
		return rf(l)
	}
	if rf, ok := ret.Get(0).(func(*types.Login) string); ok {
		r0 = rf(l)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*types.Login) *types.User); ok {
		r1 = rf(l)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*types.User)
		}
	}

	if rf, ok := ret.Get(2).(func(*types.Login) error); ok {
		r2 = rf(l)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Service_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type Service_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - l *types.Login
func (_e *Service_Expecter) Login(l interface{}) *Service_Login_Call {
	return &Service_Login_Call{Call: _e.mock.On("Login", l)}
}

func (_c *Service_Login_Call) Run(run func(l *types.Login)) *Service_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*types.Login))
	})
	return _c
}

func (_c *Service_Login_Call) Return(_a0 string, _a1 *types.User, _a2 error) *Service_Login_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *Service_Login_Call) RunAndReturn(run func(*types.Login) (string, *types.User, error)) *Service_Login_Call {
	_c.Call.Return(run)
	return _c
}

// RegenerateToken provides a mock function with given fields: token, user
func (_m *Service) RegenerateToken(token string, user uuid.UUID) error {
	ret := _m.Called(token, user)

	if len(ret) == 0 {
		panic("no return value specified for RegenerateToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, uuid.UUID) error); ok {
		r0 = rf(token, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Service_RegenerateToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegenerateToken'
type Service_RegenerateToken_Call struct {
	*mock.Call
}

// RegenerateToken is a helper method to define mock.On call
//   - token string
//   - user uuid.UUID
func (_e *Service_Expecter) RegenerateToken(token interface{}, user interface{}) *Service_RegenerateToken_Call {
	return &Service_RegenerateToken_Call{Call: _e.mock.On("RegenerateToken", token, user)}
}

func (_c *Service_RegenerateToken_Call) Run(run func(token string, user uuid.UUID)) *Service_RegenerateToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *Service_RegenerateToken_Call) Return(_a0 error) *Service_RegenerateToken_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Service_RegenerateToken_Call) RunAndReturn(run func(string, uuid.UUID) error) *Service_RegenerateToken_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateBudget provides a mock function with given fields: b, budget
func (_m *Service) UpdateBudget(b types.CreateBudget, budget types.Budget) error {
	ret := _m.Called(b, budget)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBudget")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(types.CreateBudget, types.Budget) error); ok {
		r0 = rf(b, budget)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Service_UpdateBudget_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateBudget'
type Service_UpdateBudget_Call struct {
	*mock.Call
}

// UpdateBudget is a helper method to define mock.On call
//   - b types.CreateBudget
//   - budget types.Budget
func (_e *Service_Expecter) UpdateBudget(b interface{}, budget interface{}) *Service_UpdateBudget_Call {
	return &Service_UpdateBudget_Call{Call: _e.mock.On("UpdateBudget", b, budget)}
}

func (_c *Service_UpdateBudget_Call) Run(run func(b types.CreateBudget, budget types.Budget)) *Service_UpdateBudget_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.CreateBudget), args[1].(types.Budget))
	})
	return _c
}

func (_c *Service_UpdateBudget_Call) Return(_a0 error) *Service_UpdateBudget_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Service_UpdateBudget_Call) RunAndReturn(run func(types.CreateBudget, types.Budget) error) *Service_UpdateBudget_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateBudgetItem provides a mock function with given fields: bi
func (_m *Service) UpdateBudgetItem(bi *types.BudgetItem) error {
	ret := _m.Called(bi)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBudgetItem")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*types.BudgetItem) error); ok {
		r0 = rf(bi)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Service_UpdateBudgetItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateBudgetItem'
type Service_UpdateBudgetItem_Call struct {
	*mock.Call
}

// UpdateBudgetItem is a helper method to define mock.On call
//   - bi *types.BudgetItem
func (_e *Service_Expecter) UpdateBudgetItem(bi interface{}) *Service_UpdateBudgetItem_Call {
	return &Service_UpdateBudgetItem_Call{Call: _e.mock.On("UpdateBudgetItem", bi)}
}

func (_c *Service_UpdateBudgetItem_Call) Run(run func(bi *types.BudgetItem)) *Service_UpdateBudgetItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*types.BudgetItem))
	})
	return _c
}

func (_c *Service_UpdateBudgetItem_Call) Return(_a0 error) *Service_UpdateBudgetItem_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Service_UpdateBudgetItem_Call) RunAndReturn(run func(*types.BudgetItem) error) *Service_UpdateBudgetItem_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCategory provides a mock function with given fields: category
func (_m *Service) UpdateCategory(category types.Category) error {
	ret := _m.Called(category)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCategory")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(types.Category) error); ok {
		r0 = rf(category)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Service_UpdateCategory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCategory'
type Service_UpdateCategory_Call struct {
	*mock.Call
}

// UpdateCategory is a helper method to define mock.On call
//   - category types.Category
func (_e *Service_Expecter) UpdateCategory(category interface{}) *Service_UpdateCategory_Call {
	return &Service_UpdateCategory_Call{Call: _e.mock.On("UpdateCategory", category)}
}

func (_c *Service_UpdateCategory_Call) Run(run func(category types.Category)) *Service_UpdateCategory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Category))
	})
	return _c
}

func (_c *Service_UpdateCategory_Call) Return(_a0 error) *Service_UpdateCategory_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Service_UpdateCategory_Call) RunAndReturn(run func(types.Category) error) *Service_UpdateCategory_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateInvoice provides a mock function with given fields: invoice
func (_m *Service) UpdateInvoice(invoice types.InvoiceCreate) error {
	ret := _m.Called(invoice)

	if len(ret) == 0 {
		panic("no return value specified for UpdateInvoice")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(types.InvoiceCreate) error); ok {
		r0 = rf(invoice)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Service_UpdateInvoice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateInvoice'
type Service_UpdateInvoice_Call struct {
	*mock.Call
}

// UpdateInvoice is a helper method to define mock.On call
//   - invoice types.InvoiceCreate
func (_e *Service_Expecter) UpdateInvoice(invoice interface{}) *Service_UpdateInvoice_Call {
	return &Service_UpdateInvoice_Call{Call: _e.mock.On("UpdateInvoice", invoice)}
}

func (_c *Service_UpdateInvoice_Call) Run(run func(invoice types.InvoiceCreate)) *Service_UpdateInvoice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.InvoiceCreate))
	})
	return _c
}

func (_c *Service_UpdateInvoice_Call) Return(_a0 error) *Service_UpdateInvoice_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Service_UpdateInvoice_Call) RunAndReturn(run func(types.InvoiceCreate) error) *Service_UpdateInvoice_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateMaterial provides a mock function with given fields: material
func (_m *Service) UpdateMaterial(material types.Material) error {
	ret := _m.Called(material)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMaterial")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(types.Material) error); ok {
		r0 = rf(material)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Service_UpdateMaterial_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateMaterial'
type Service_UpdateMaterial_Call struct {
	*mock.Call
}

// UpdateMaterial is a helper method to define mock.On call
//   - material types.Material
func (_e *Service_Expecter) UpdateMaterial(material interface{}) *Service_UpdateMaterial_Call {
	return &Service_UpdateMaterial_Call{Call: _e.mock.On("UpdateMaterial", material)}
}

func (_c *Service_UpdateMaterial_Call) Run(run func(material types.Material)) *Service_UpdateMaterial_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Material))
	})
	return _c
}

func (_c *Service_UpdateMaterial_Call) Return(_a0 error) *Service_UpdateMaterial_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Service_UpdateMaterial_Call) RunAndReturn(run func(types.Material) error) *Service_UpdateMaterial_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateMaterialByItem provides a mock function with given fields: itemId, materialId, quantity, companyId
func (_m *Service) UpdateMaterialByItem(itemId uuid.UUID, materialId uuid.UUID, quantity float64, companyId uuid.UUID) error {
	ret := _m.Called(itemId, materialId, quantity, companyId)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMaterialByItem")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID, float64, uuid.UUID) error); ok {
		r0 = rf(itemId, materialId, quantity, companyId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Service_UpdateMaterialByItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateMaterialByItem'
type Service_UpdateMaterialByItem_Call struct {
	*mock.Call
}

// UpdateMaterialByItem is a helper method to define mock.On call
//   - itemId uuid.UUID
//   - materialId uuid.UUID
//   - quantity float64
//   - companyId uuid.UUID
func (_e *Service_Expecter) UpdateMaterialByItem(itemId interface{}, materialId interface{}, quantity interface{}, companyId interface{}) *Service_UpdateMaterialByItem_Call {
	return &Service_UpdateMaterialByItem_Call{Call: _e.mock.On("UpdateMaterialByItem", itemId, materialId, quantity, companyId)}
}

func (_c *Service_UpdateMaterialByItem_Call) Run(run func(itemId uuid.UUID, materialId uuid.UUID, quantity float64, companyId uuid.UUID)) *Service_UpdateMaterialByItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(uuid.UUID), args[2].(float64), args[3].(uuid.UUID))
	})
	return _c
}

func (_c *Service_UpdateMaterialByItem_Call) Return(_a0 error) *Service_UpdateMaterialByItem_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Service_UpdateMaterialByItem_Call) RunAndReturn(run func(uuid.UUID, uuid.UUID, float64, uuid.UUID) error) *Service_UpdateMaterialByItem_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePassword provides a mock function with given fields: pass, id, companyId
func (_m *Service) UpdatePassword(pass string, id uuid.UUID, companyId uuid.UUID) (types.User, error) {
	ret := _m.Called(pass, id, companyId)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePassword")
	}

	var r0 types.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string, uuid.UUID, uuid.UUID) (types.User, error)); ok {
		return rf(pass, id, companyId)
	}
	if rf, ok := ret.Get(0).(func(string, uuid.UUID, uuid.UUID) types.User); ok {
		r0 = rf(pass, id, companyId)
	} else {
		r0 = ret.Get(0).(types.User)
	}

	if rf, ok := ret.Get(1).(func(string, uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(pass, id, companyId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_UpdatePassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePassword'
type Service_UpdatePassword_Call struct {
	*mock.Call
}

// UpdatePassword is a helper method to define mock.On call
//   - pass string
//   - id uuid.UUID
//   - companyId uuid.UUID
func (_e *Service_Expecter) UpdatePassword(pass interface{}, id interface{}, companyId interface{}) *Service_UpdatePassword_Call {
	return &Service_UpdatePassword_Call{Call: _e.mock.On("UpdatePassword", pass, id, companyId)}
}

func (_c *Service_UpdatePassword_Call) Run(run func(pass string, id uuid.UUID, companyId uuid.UUID)) *Service_UpdatePassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(uuid.UUID), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *Service_UpdatePassword_Call) Return(_a0 types.User, _a1 error) *Service_UpdatePassword_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_UpdatePassword_Call) RunAndReturn(run func(string, uuid.UUID, uuid.UUID) (types.User, error)) *Service_UpdatePassword_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProject provides a mock function with given fields: p, id, companyId
func (_m *Service) UpdateProject(p types.Project, id uuid.UUID, companyId uuid.UUID) error {
	ret := _m.Called(p, id, companyId)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProject")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(types.Project, uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(p, id, companyId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Service_UpdateProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProject'
type Service_UpdateProject_Call struct {
	*mock.Call
}

// UpdateProject is a helper method to define mock.On call
//   - p types.Project
//   - id uuid.UUID
//   - companyId uuid.UUID
func (_e *Service_Expecter) UpdateProject(p interface{}, id interface{}, companyId interface{}) *Service_UpdateProject_Call {
	return &Service_UpdateProject_Call{Call: _e.mock.On("UpdateProject", p, id, companyId)}
}

func (_c *Service_UpdateProject_Call) Run(run func(p types.Project, id uuid.UUID, companyId uuid.UUID)) *Service_UpdateProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Project), args[1].(uuid.UUID), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *Service_UpdateProject_Call) Return(_a0 error) *Service_UpdateProject_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Service_UpdateProject_Call) RunAndReturn(run func(types.Project, uuid.UUID, uuid.UUID) error) *Service_UpdateProject_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateQuantity provides a mock function with given fields: q, companyId
func (_m *Service) UpdateQuantity(q types.Quantity, companyId uuid.UUID) error {
	ret := _m.Called(q, companyId)

	if len(ret) == 0 {
		panic("no return value specified for UpdateQuantity")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(types.Quantity, uuid.UUID) error); ok {
		r0 = rf(q, companyId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Service_UpdateQuantity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateQuantity'
type Service_UpdateQuantity_Call struct {
	*mock.Call
}

// UpdateQuantity is a helper method to define mock.On call
//   - q types.Quantity
//   - companyId uuid.UUID
func (_e *Service_Expecter) UpdateQuantity(q interface{}, companyId interface{}) *Service_UpdateQuantity_Call {
	return &Service_UpdateQuantity_Call{Call: _e.mock.On("UpdateQuantity", q, companyId)}
}

func (_c *Service_UpdateQuantity_Call) Run(run func(q types.Quantity, companyId uuid.UUID)) *Service_UpdateQuantity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Quantity), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *Service_UpdateQuantity_Call) Return(_a0 error) *Service_UpdateQuantity_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Service_UpdateQuantity_Call) RunAndReturn(run func(types.Quantity, uuid.UUID) error) *Service_UpdateQuantity_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateRubro provides a mock function with given fields: rubro
func (_m *Service) UpdateRubro(rubro types.Rubro) error {
	ret := _m.Called(rubro)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRubro")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(types.Rubro) error); ok {
		r0 = rf(rubro)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Service_UpdateRubro_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateRubro'
type Service_UpdateRubro_Call struct {
	*mock.Call
}

// UpdateRubro is a helper method to define mock.On call
//   - rubro types.Rubro
func (_e *Service_Expecter) UpdateRubro(rubro interface{}) *Service_UpdateRubro_Call {
	return &Service_UpdateRubro_Call{Call: _e.mock.On("UpdateRubro", rubro)}
}

func (_c *Service_UpdateRubro_Call) Run(run func(rubro types.Rubro)) *Service_UpdateRubro_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Rubro))
	})
	return _c
}

func (_c *Service_UpdateRubro_Call) Return(_a0 error) *Service_UpdateRubro_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Service_UpdateRubro_Call) RunAndReturn(run func(types.Rubro) error) *Service_UpdateRubro_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateSupplier provides a mock function with given fields: supplier
func (_m *Service) UpdateSupplier(supplier *types.Supplier) error {
	ret := _m.Called(supplier)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSupplier")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*types.Supplier) error); ok {
		r0 = rf(supplier)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Service_UpdateSupplier_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSupplier'
type Service_UpdateSupplier_Call struct {
	*mock.Call
}

// UpdateSupplier is a helper method to define mock.On call
//   - supplier *types.Supplier
func (_e *Service_Expecter) UpdateSupplier(supplier interface{}) *Service_UpdateSupplier_Call {
	return &Service_UpdateSupplier_Call{Call: _e.mock.On("UpdateSupplier", supplier)}
}

func (_c *Service_UpdateSupplier_Call) Run(run func(supplier *types.Supplier)) *Service_UpdateSupplier_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*types.Supplier))
	})
	return _c
}

func (_c *Service_UpdateSupplier_Call) Return(_a0 error) *Service_UpdateSupplier_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Service_UpdateSupplier_Call) RunAndReturn(run func(*types.Supplier) error) *Service_UpdateSupplier_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function with given fields: u, id, companyId
func (_m *Service) UpdateUser(u types.User, id uuid.UUID, companyId uuid.UUID) (types.User, error) {
	ret := _m.Called(u, id, companyId)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 types.User
	var r1 error
	if rf, ok := ret.Get(0).(func(types.User, uuid.UUID, uuid.UUID) (types.User, error)); ok {
		return rf(u, id, companyId)
	}
	if rf, ok := ret.Get(0).(func(types.User, uuid.UUID, uuid.UUID) types.User); ok {
		r0 = rf(u, id, companyId)
	} else {
		r0 = ret.Get(0).(types.User)
	}

	if rf, ok := ret.Get(1).(func(types.User, uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(u, id, companyId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type Service_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - u types.User
//   - id uuid.UUID
//   - companyId uuid.UUID
func (_e *Service_Expecter) UpdateUser(u interface{}, id interface{}, companyId interface{}) *Service_UpdateUser_Call {
	return &Service_UpdateUser_Call{Call: _e.mock.On("UpdateUser", u, id, companyId)}
}

func (_c *Service_UpdateUser_Call) Run(run func(u types.User, id uuid.UUID, companyId uuid.UUID)) *Service_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.User), args[1].(uuid.UUID), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *Service_UpdateUser_Call) Return(_a0 types.User, _a1 error) *Service_UpdateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_UpdateUser_Call) RunAndReturn(run func(types.User, uuid.UUID, uuid.UUID) (types.User, error)) *Service_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
